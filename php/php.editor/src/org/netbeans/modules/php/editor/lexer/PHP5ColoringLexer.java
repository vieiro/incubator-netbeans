/* The following code was generated by JFlex 1.4.3 on 20/10/19 13:32 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.netbeans.modules.php.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;
import org.netbeans.modules.web.common.api.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20/10/19 13:32 from the specification file
 * <tt>/home/junichi11/NetBeansProjects/netbeans/php/php.editor/tools/Php5ColoringScanner.flex</tt>
 */
public class PHP5ColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_END_NOWDOC = 22;
  public static final int ST_PHP_NOWDOC = 18;
  public static final int ST_PHP_END_HEREDOC = 16;
  public static final int ST_PHP_COMMENT = 32;
  public static final int ST_PHP_START_HEREDOC = 14;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 8;
  public static final int ST_PHP_IN_SCRIPTING = 2;
  public static final int ST_PHP_LOOKING_FOR_CONSTANT_NAME = 28;
  public static final int ST_PHP_LOOKING_FOR_STATIC_PROPERTY = 10;
  public static final int ST_PHP_DOC_COMMENT = 34;
  public static final int ST_PHP_LINE_COMMENT = 36;
  public static final int ST_PHP_LOOKING_FOR_FUNCTION_NAME = 26;
  public static final int ST_PHP_BACKQUOTE = 6;
  public static final int ST_PHP_START_NOWDOC = 20;
  public static final int ST_PHP_HEREDOC = 12;
  public static final int ST_HALTED_COMPILER = 40;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 38;
  public static final int ST_PHP_VAR_OFFSET = 30;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_DOUBLE_QUOTES = 4;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\17\1\16\2\0\1\22\22\0\1\17\1\33\1\24\1\112"+
    "\1\23\1\37\1\40\1\107\1\110\1\74\1\35\1\32\1\111\1\5"+
    "\1\3\1\36\1\6\1\12\10\1\1\120\1\21\1\34\1\30\1\31"+
    "\1\44\1\43\1\47\1\11\1\77\1\51\1\4\1\10\1\104\1\106"+
    "\1\100\1\122\1\117\1\103\1\115\1\50\1\45\1\101\1\123\1\46"+
    "\1\76\1\102\1\105\1\121\1\116\1\7\1\114\1\14\1\113\1\25"+
    "\1\20\1\42\1\2\1\26\1\60\1\64\1\71\1\66\1\67\1\55"+
    "\1\63\1\106\1\52\1\70\1\117\1\56\1\72\1\53\1\57\1\75"+
    "\1\123\1\62\1\61\1\54\1\105\1\65\1\116\1\73\1\114\1\14"+
    "\1\27\1\41\1\124\1\43\53\14\1\14\12\14\1\14\4\14\1\14"+
    "\5\14\27\14\1\14\37\14\1\14\10\14\u01c2\13\4\0\14\13\16\0"+
    "\5\13\7\0\1\13\1\0\1\13\201\0\5\13\1\0\2\13\2\0"+
    "\4\13\10\0\1\13\1\0\3\13\1\0\1\13\1\0\24\13\1\0"+
    "\123\13\1\0\213\13\10\0\236\13\11\0\46\13\2\0\1\13\7\0"+
    "\47\13\110\0\33\13\5\0\3\13\55\0\53\13\25\0\12\15\4\0"+
    "\2\13\1\0\143\13\1\0\1\13\17\0\2\13\7\0\2\13\12\15"+
    "\3\13\2\0\1\13\20\0\1\13\1\0\36\13\35\0\131\13\13\0"+
    "\1\13\16\0\12\15\41\13\11\0\2\13\4\0\1\13\5\0\26\13"+
    "\4\0\1\13\11\0\1\13\3\0\1\13\27\0\31\13\107\0\1\13"+
    "\1\0\13\13\127\0\66\13\3\0\1\13\22\0\1\13\7\0\12\13"+
    "\4\0\12\15\1\0\7\13\1\0\7\13\5\0\10\13\2\0\2\13"+
    "\2\0\26\13\1\0\7\13\1\0\1\13\3\0\4\13\3\0\1\13"+
    "\20\0\1\13\15\0\2\13\1\0\3\13\4\0\12\15\2\13\23\0"+
    "\6\13\4\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13\1\0"+
    "\2\13\1\0\2\13\37\0\4\13\1\0\1\13\7\0\12\15\2\0"+
    "\3\13\20\0\11\13\1\0\3\13\1\0\26\13\1\0\7\13\1\0"+
    "\2\13\1\0\5\13\3\0\1\13\22\0\1\13\17\0\2\13\4\0"+
    "\12\15\25\0\10\13\2\0\2\13\2\0\26\13\1\0\7\13\1\0"+
    "\2\13\1\0\5\13\3\0\1\13\36\0\2\13\1\0\3\13\4\0"+
    "\12\15\1\0\1\13\21\0\1\13\1\0\6\13\3\0\3\13\1\0"+
    "\4\13\3\0\2\13\1\0\1\13\1\0\2\13\3\0\2\13\3\0"+
    "\3\13\3\0\14\13\26\0\1\13\25\0\12\15\25\0\10\13\1\0"+
    "\3\13\1\0\27\13\1\0\12\13\1\0\5\13\3\0\1\13\32\0"+
    "\2\13\6\0\2\13\4\0\12\15\25\0\10\13\1\0\3\13\1\0"+
    "\27\13\1\0\12\13\1\0\5\13\3\0\1\13\40\0\1\13\1\0"+
    "\2\13\4\0\12\15\1\0\2\13\22\0\10\13\1\0\3\13\1\0"+
    "\51\13\2\0\1\13\20\0\1\13\21\0\2\13\4\0\12\15\12\0"+
    "\6\13\5\0\22\13\3\0\30\13\1\0\11\13\1\0\1\13\2\0"+
    "\7\13\72\0\60\13\1\0\2\13\14\0\7\13\11\0\12\15\47\0"+
    "\2\13\1\0\1\13\2\0\2\13\1\0\1\13\2\0\1\13\6\0"+
    "\4\13\1\0\7\13\1\0\3\13\1\0\1\13\1\0\1\13\2\0"+
    "\2\13\1\0\4\13\1\0\2\13\11\0\1\13\2\0\5\13\1\0"+
    "\1\13\11\0\12\15\2\0\4\13\40\0\1\13\37\0\12\15\26\0"+
    "\10\13\1\0\44\13\33\0\5\13\163\0\53\13\24\0\1\13\12\15"+
    "\6\0\6\13\4\0\4\13\3\0\1\13\3\0\2\13\7\0\3\13"+
    "\4\0\15\13\14\0\1\13\1\0\12\15\6\0\46\13\1\0\1\13"+
    "\5\0\1\13\2\0\53\13\1\0\u014d\13\1\0\4\13\2\0\7\13"+
    "\1\0\1\13\1\0\4\13\2\0\51\13\1\0\4\13\2\0\41\13"+
    "\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0\17\13"+
    "\1\0\71\13\1\0\4\13\2\0\103\13\45\0\20\13\20\0\125\13"+
    "\14\0\u026c\13\2\0\21\13\1\0\32\13\5\0\113\13\25\0\15\13"+
    "\1\0\4\13\16\0\22\13\16\0\22\13\16\0\15\13\1\0\3\13"+
    "\17\0\64\13\43\0\1\13\4\0\1\13\3\0\12\15\46\0\12\15"+
    "\6\0\130\13\10\0\51\13\1\0\1\13\5\0\106\13\12\0\35\13"+
    "\51\0\12\15\36\13\2\0\5\13\13\0\54\13\25\0\7\13\10\0"+
    "\12\15\46\0\27\13\11\0\65\13\53\0\12\15\6\0\12\15\15\0"+
    "\1\13\135\0\57\13\21\0\7\13\4\0\12\15\51\0\36\13\15\0"+
    "\2\13\12\15\54\13\32\0\44\13\34\0\12\15\3\0\3\13\12\15"+
    "\44\13\153\0\4\13\1\0\4\13\3\0\2\13\11\0\300\13\100\0"+
    "\u0116\13\2\0\6\13\2\0\46\13\2\0\6\13\2\0\10\13\1\0"+
    "\1\13\1\0\1\13\1\0\1\13\1\0\37\13\2\0\65\13\1\0"+
    "\7\13\1\0\1\13\3\0\3\13\1\0\7\13\3\0\4\13\2\0"+
    "\6\13\4\0\15\13\5\0\3\13\1\0\7\13\164\0\1\13\15\0"+
    "\1\13\20\0\15\13\145\0\1\13\4\0\1\13\2\0\12\13\1\0"+
    "\1\13\3\0\5\13\6\0\1\13\1\0\1\13\1\0\1\13\1\0"+
    "\4\13\1\0\13\13\2\0\4\13\5\0\5\13\4\0\1\13\64\0"+
    "\2\13\u0a7b\0\57\13\1\0\57\13\1\0\205\13\6\0\4\13\3\0"+
    "\2\13\14\0\46\13\1\0\1\13\5\0\1\13\2\0\70\13\7\0"+
    "\1\13\20\0\27\13\11\0\7\13\1\0\7\13\1\0\7\13\1\0"+
    "\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13\120\0"+
    "\1\13\u01d5\0\2\13\52\0\5\13\5\0\2\13\4\0\126\13\6\0"+
    "\3\13\1\0\132\13\1\0\4\13\5\0\51\13\3\0\136\13\21\0"+
    "\33\13\65\0\20\13\u0200\0\u19b6\13\112\0\u51cd\13\63\0\u048d\13\103\0"+
    "\56\13\2\0\u010d\13\3\0\20\13\12\15\2\13\24\0\57\13\20\0"+
    "\31\13\10\0\106\13\61\0\11\13\2\0\147\13\2\0\4\13\1\0"+
    "\4\13\14\0\13\13\115\0\12\13\1\0\3\13\1\0\4\13\1\0"+
    "\27\13\35\0\64\13\16\0\62\13\34\0\12\15\30\0\6\13\3\0"+
    "\1\13\4\0\12\15\34\13\12\0\27\13\31\0\35\13\7\0\57\13"+
    "\34\0\1\13\12\15\46\0\51\13\27\0\3\13\1\0\10\13\4\0"+
    "\12\15\6\0\27\13\3\0\1\13\5\0\60\13\1\0\1\13\3\0"+
    "\2\13\2\0\5\13\2\0\1\13\1\0\1\13\30\0\3\13\2\0"+
    "\13\13\7\0\3\13\14\0\6\13\2\0\6\13\2\0\6\13\11\0"+
    "\7\13\1\0\7\13\221\0\43\13\15\0\12\15\6\0\u2ba4\13\14\0"+
    "\27\13\4\0\61\13\u2104\0\u016e\13\2\0\152\13\46\0\7\13\14\0"+
    "\5\13\5\0\1\13\1\0\12\13\1\0\15\13\1\0\5\13\1\0"+
    "\1\13\1\0\2\13\1\0\2\13\1\0\154\13\41\0\u016b\13\22\0"+
    "\100\13\2\0\66\13\50\0\14\13\164\0\5\13\1\0\207\13\23\0"+
    "\12\15\7\0\32\13\6\0\32\13\13\0\131\13\3\0\6\13\2\0"+
    "\6\13\2\0\6\13\2\0\3\13\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\25\0\2\1\1\2\1\3\1\4\1\5\1\4\1\6"+
    "\1\3\4\4\1\7\1\5\1\10\1\5\1\11\1\12"+
    "\1\13\1\14\14\6\1\5\24\4\1\2\1\5\1\15"+
    "\1\16\3\4\1\5\1\4\1\17\1\20\1\21\1\22"+
    "\2\21\1\20\3\21\4\23\1\24\1\23\3\25\1\21"+
    "\1\2\1\21\1\26\1\27\1\26\1\30\1\2\1\31"+
    "\1\2\2\31\3\32\1\33\1\0\2\2\1\34\1\35"+
    "\2\34\1\36\2\37\1\3\1\40\1\3\1\41\1\40"+
    "\1\42\4\0\4\43\2\44\1\45\1\46\1\47\1\0"+
    "\1\50\1\51\2\0\1\3\1\0\1\4\1\3\1\0"+
    "\6\4\1\52\2\0\2\4\1\53\2\4\1\0\1\4"+
    "\1\0\1\54\2\0\1\21\2\0\2\6\1\0\1\55"+
    "\1\16\1\56\1\0\1\57\1\60\4\4\1\61\4\4"+
    "\1\62\1\4\1\63\35\4\13\0\1\64\2\4\1\65"+
    "\3\0\2\66\2\67\1\70\1\71\1\67\3\0\1\66"+
    "\2\67\1\72\1\0\1\73\3\0\1\74\1\0\1\27"+
    "\1\0\1\30\3\0\1\75\1\0\1\31\2\76\1\0"+
    "\1\33\1\0\1\77\3\0\1\100\1\0\1\66\1\0"+
    "\1\101\1\0\1\102\1\103\1\43\1\104\1\105\2\0"+
    "\10\4\1\0\7\4\2\3\1\106\3\4\1\0\1\4"+
    "\3\0\1\107\4\4\1\110\4\4\1\111\3\4\1\112"+
    "\5\4\1\113\13\4\1\114\16\4\1\115\12\0\2\4"+
    "\3\116\1\117\1\120\1\0\1\121\1\0\1\74\1\75"+
    "\1\122\1\123\1\124\1\43\2\0\11\4\1\125\6\4"+
    "\1\126\1\127\1\130\6\4\4\0\1\131\5\4\1\132"+
    "\11\4\1\133\2\4\1\134\1\4\1\135\3\4\1\136"+
    "\1\4\1\137\1\140\4\4\1\141\12\4\12\0\2\4"+
    "\1\120\1\43\1\142\1\0\14\4\1\143\3\4\1\144"+
    "\1\4\1\145\1\146\1\4\1\147\2\150\3\0\3\4"+
    "\1\151\10\4\1\152\1\4\1\153\1\154\1\155\6\4"+
    "\1\156\1\157\1\4\1\160\1\161\1\162\1\163\1\4"+
    "\1\164\3\4\1\165\10\0\1\166\1\0\1\167\1\170"+
    "\1\43\1\0\12\4\1\171\3\4\1\172\3\4\3\0"+
    "\1\173\13\4\1\174\1\175\1\176\1\177\1\200\4\4"+
    "\1\201\1\202\5\0\1\43\1\1\3\4\1\203\5\4"+
    "\1\204\4\4\1\205\1\206\1\4\2\207\1\0\1\210"+
    "\2\4\1\211\1\212\3\4\1\213\5\4\1\214\3\0"+
    "\1\43\1\0\1\215\3\4\1\216\6\4\1\217\1\220"+
    "\1\0\1\4\1\221\5\4\1\222\1\4\1\223\1\224"+
    "\1\4\1\0\1\43\1\0\2\4\1\225\1\226\4\4"+
    "\1\227\1\47\1\4\1\230\1\231\1\232\3\4\1\233"+
    "\1\0\1\43\1\0\2\4\1\234\1\4\1\235\1\236"+
    "\1\4\1\237\1\4\1\240\1\241\1\43\1\0\5\4"+
    "\1\0\1\242\2\4\1\243\1\244\1\0\1\245\1\4"+
    "\1\0\1\4\1\0\1\246\14\0\1\247\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[756];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe\0\u0253"+
    "\0\u02a8\0\u02fd\0\u0352\0\u03a7\0\u03fc\0\u0451\0\u04a6\0\u04fb"+
    "\0\u0550\0\u05a5\0\u05fa\0\u064f\0\u06a4\0\u06f9\0\u074e\0\u07a3"+
    "\0\u07f8\0\u084d\0\u08a2\0\u08f7\0\u094c\0\u09a1\0\u09f6\0\u0a4b"+
    "\0\u0aa0\0\u0af5\0\u0b4a\0\u07a3\0\u07a3\0\u0b9f\0\u0bf4\0\u07a3"+
    "\0\u07a3\0\u07a3\0\u0c49\0\u0c9e\0\u0cf3\0\u0d48\0\u0d9d\0\u0df2"+
    "\0\u0e47\0\u0e9c\0\u0ef1\0\u0f46\0\u0f9b\0\u07a3\0\u0ff0\0\u1045"+
    "\0\u109a\0\u10ef\0\u1144\0\u1199\0\u11ee\0\u1243\0\u1298\0\u12ed"+
    "\0\u1342\0\u1397\0\u13ec\0\u1441\0\u1496\0\u14eb\0\u1540\0\u1595"+
    "\0\u15ea\0\u163f\0\u1694\0\u16e9\0\u173e\0\u07a3\0\u1793\0\u17e8"+
    "\0\u183d\0\u1892\0\u18e7\0\u193c\0\u07a3\0\u1991\0\u19e6\0\u07a3"+
    "\0\u1a3b\0\u1a90\0\u1ae5\0\u1b3a\0\u1b8f\0\u1be4\0\u07a3\0\u1c39"+
    "\0\u1c8e\0\u1ce3\0\u1d38\0\u1d8d\0\u1de2\0\u1e37\0\u1e8c\0\u1ee1"+
    "\0\u1f36\0\u1c8e\0\u07a3\0\u1f8b\0\u1fe0\0\u2035\0\u208a\0\u20df"+
    "\0\u2134\0\u2189\0\u21de\0\u07a3\0\u2233\0\u2288\0\u22dd\0\u2332"+
    "\0\u2387\0\u2332\0\u07a3\0\u23dc\0\u2431\0\u2486\0\u07a3\0\u07a3"+
    "\0\u24db\0\u2530\0\u07a3\0\u2585\0\u07a3\0\u25da\0\u07a3\0\u262f"+
    "\0\u2684\0\u26d9\0\u272e\0\u2783\0\u07a3\0\u27d8\0\u282d\0\u2882"+
    "\0\u28d7\0\u07a3\0\u292c\0\u06a4\0\u2981\0\u29d6\0\u2a2b\0\u2a80"+
    "\0\u2ad5\0\u2b2a\0\u2b7f\0\u2bd4\0\u2c29\0\u2c7e\0\u2cd3\0\u2d28"+
    "\0\u2d7d\0\u2dd2\0\u2e27\0\u2e7c\0\u07a3\0\u2ed1\0\u2f26\0\u2f7b"+
    "\0\u2fd0\0\u0af5\0\u3025\0\u307a\0\u30cf\0\u3124\0\u16e9\0\u3179"+
    "\0\u0bf4\0\u31ce\0\u07a3\0\u3223\0\u3278\0\u32cd\0\u3322\0\u3377"+
    "\0\u33cc\0\u07a3\0\u3421\0\u3476\0\u34cb\0\u0af5\0\u3520\0\u3575"+
    "\0\u35ca\0\u361f\0\u0af5\0\u3674\0\u36c9\0\u371e\0\u3773\0\u0af5"+
    "\0\u37c8\0\u0af5\0\u381d\0\u3872\0\u38c7\0\u391c\0\u3971\0\u39c6"+
    "\0\u3a1b\0\u3a70\0\u3ac5\0\u3b1a\0\u3b6f\0\u3bc4\0\u3c19\0\u3c6e"+
    "\0\u3cc3\0\u3d18\0\u3d6d\0\u3dc2\0\u3e17\0\u3e6c\0\u3ec1\0\u3f16"+
    "\0\u3f6b\0\u3fc0\0\u4015\0\u406a\0\u40bf\0\u4114\0\u4169\0\u41be"+
    "\0\u4213\0\u4268\0\u173e\0\u42bd\0\u4312\0\u4367\0\u43bc\0\u4411"+
    "\0\u4466\0\u44bb\0\u07a3\0\u4510\0\u4565\0\u07a3\0\u45ba\0\u1a3b"+
    "\0\u460f\0\u4664\0\u46b9\0\u45ba\0\u07a3\0\u07a3\0\u07a3\0\u460f"+
    "\0\u470e\0\u1b8f\0\u4763\0\u47b8\0\u470e\0\u4763\0\u07a3\0\u480d"+
    "\0\u07a3\0\u4862\0\u48b7\0\u490c\0\u4961\0\u49b6\0\u07a3\0\u1fe0"+
    "\0\u07a3\0\u208a\0\u2134\0\u20df\0\u4a0b\0\u4a60\0\u4ab5\0\u2233"+
    "\0\u07a3\0\u2288\0\u07a3\0\u2387\0\u07a3\0\u4b0a\0\u24db\0\u4b5f"+
    "\0\u07a3\0\u4bb4\0\u4c09\0\u4c5e\0\u07a3\0\u4cb3\0\u07a3\0\u07a3"+
    "\0\u4d08\0\u4d5d\0\u07a3\0\u4db2\0\u4e07\0\u4e5c\0\u4eb1\0\u4f06"+
    "\0\u4f5b\0\u4fb0\0\u5005\0\u505a\0\u50af\0\u5104\0\u5159\0\u51ae"+
    "\0\u5203\0\u5258\0\u52ad\0\u5302\0\u5357\0\u53ac\0\u5401\0\u5456"+
    "\0\u54ab\0\u5500\0\u5555\0\u55aa\0\u55ff\0\u5654\0\u56a9\0\u56fe"+
    "\0\u07a3\0\u5753\0\u57a8\0\u57fd\0\u5852\0\u0af5\0\u58a7\0\u58fc"+
    "\0\u5951\0\u59a6\0\u0af5\0\u59fb\0\u5a50\0\u5aa5\0\u59fb\0\u5afa"+
    "\0\u5b4f\0\u5ba4\0\u5bf9\0\u5c4e\0\u0af5\0\u5ca3\0\u5cf8\0\u5d4d"+
    "\0\u5da2\0\u5df7\0\u5e4c\0\u5ea1\0\u5ef6\0\u5f4b\0\u5fa0\0\u5ff5"+
    "\0\u0af5\0\u604a\0\u609f\0\u60f4\0\u6149\0\u619e\0\u61f3\0\u6248"+
    "\0\u629d\0\u62f2\0\u6347\0\u639c\0\u63f1\0\u6446\0\u649b\0\u0af5"+
    "\0\u64f0\0\u6545\0\u659a\0\u65ef\0\u6644\0\u6699\0\u66ee\0\u6743"+
    "\0\u6798\0\u67ed\0\u6842\0\u6897\0\u07a3\0\u1991\0\u1ae5\0\u07a3"+
    "\0\u68ec\0\u6941\0\u07a3\0\u6996\0\u07a3\0\u07a3\0\u07a3\0\u07a3"+
    "\0\u07a3\0\u69eb\0\u6a40\0\u6a95\0\u6aea\0\u6b3f\0\u6b94\0\u6be9"+
    "\0\u6c3e\0\u6c93\0\u6ce8\0\u6d3d\0\u6d92\0\u0af5\0\u6de7\0\u6e3c"+
    "\0\u6e91\0\u6ee6\0\u6f3b\0\u6f90\0\u6fe5\0\u0af5\0\u0af5\0\u703a"+
    "\0\u708f\0\u70e4\0\u7139\0\u718e\0\u71e3\0\u7238\0\u728d\0\u72e2"+
    "\0\u7337\0\u56fe\0\u738c\0\u73e1\0\u7436\0\u748b\0\u74e0\0\u0af5"+
    "\0\u7535\0\u758a\0\u75df\0\u7634\0\u7689\0\u76de\0\u7733\0\u7788"+
    "\0\u77dd\0\u0af5\0\u7832\0\u7887\0\u0af5\0\u78dc\0\u0af5\0\u7931"+
    "\0\u7986\0\u79db\0\u0af5\0\u7a30\0\u0af5\0\u0af5\0\u7a85\0\u7ada"+
    "\0\u7b2f\0\u7b84\0\u0af5\0\u7bd9\0\u7c2e\0\u7c83\0\u7cd8\0\u7d2d"+
    "\0\u7d82\0\u7dd7\0\u7e2c\0\u7e81\0\u7ed6\0\u7f2b\0\u7f80\0\u7fd5"+
    "\0\u802a\0\u807f\0\u80d4\0\u8129\0\u817e\0\u81d3\0\u8228\0\u827d"+
    "\0\u82d2\0\u07a3\0\u8327\0\u07a3\0\u837c\0\u83d1\0\u8426\0\u847b"+
    "\0\u84d0\0\u8525\0\u857a\0\u85cf\0\u8624\0\u8679\0\u86ce\0\u8723"+
    "\0\u8778\0\u0af5\0\u87cd\0\u8822\0\u8877\0\u0af5\0\u88cc\0\u0af5"+
    "\0\u8921\0\u8976\0\u0af5\0\u07a3\0\u89cb\0\u8a20\0\u8a75\0\u8aca"+
    "\0\u8b1f\0\u8b74\0\u8bc9\0\u0af5\0\u8c1e\0\u8c73\0\u8cc8\0\u8d1d"+
    "\0\u8d72\0\u8dc7\0\u8e1c\0\u8e71\0\u0af5\0\u8ec6\0\u0af5\0\u0af5"+
    "\0\u0af5\0\u8f1b\0\u8f70\0\u8fc5\0\u901a\0\u906f\0\u90c4\0\u0af5"+
    "\0\u0af5\0\u9119\0\u0af5\0\u0af5\0\u0af5\0\u0af5\0\u916e\0\u0af5"+
    "\0\u91c3\0\u9218\0\u926d\0\u0af5\0\u92c2\0\u9317\0\u936c\0\u93c1"+
    "\0\u9416\0\u946b\0\u94c0\0\u9515\0\u07a3\0\u956a\0\u95bf\0\u0af5"+
    "\0\u9614\0\u9669\0\u96be\0\u9713\0\u9768\0\u97bd\0\u9812\0\u9867"+
    "\0\u98bc\0\u9911\0\u9966\0\u99bb\0\u9a10\0\u9a65\0\u9aba\0\u9b0f"+
    "\0\u0af5\0\u9b64\0\u9bb9\0\u9c0e\0\u9c63\0\u9cb8\0\u9d0d\0\u0af5"+
    "\0\u9d62\0\u9db7\0\u9e0c\0\u9e61\0\u9eb6\0\u9f0b\0\u9f60\0\u9fb5"+
    "\0\ua00a\0\ua05f\0\ua0b4\0\u0af5\0\u0af5\0\u0af5\0\u0af5\0\u0af5"+
    "\0\ua109\0\ua15e\0\ua1b3\0\ua208\0\u0af5\0\u0af5\0\ua25d\0\ua2b2"+
    "\0\ua307\0\ua35c\0\ua3b1\0\ua406\0\ua45b\0\ua4b0\0\ua505\0\ua55a"+
    "\0\u0af5\0\ua5af\0\ua604\0\ua659\0\ua6ae\0\ua703\0\u0af5\0\ua758"+
    "\0\ua7ad\0\ua802\0\ua857\0\u0af5\0\u0af5\0\ua8ac\0\u07a3\0\ua901"+
    "\0\ua956\0\ua9ab\0\uaa00\0\uaa55\0\u0af5\0\u0af5\0\uaaaa\0\uaaff"+
    "\0\uab54\0\uaba9\0\uabfe\0\uac53\0\uaca8\0\uacfd\0\uad52\0\u0af5"+
    "\0\uada7\0\uadfc\0\uae51\0\uaea6\0\uaefb\0\u0af5\0\uaf50\0\uafa5"+
    "\0\uaffa\0\u0af5\0\ub04f\0\ub0a4\0\ub0f9\0\ub14e\0\ub1a3\0\ub1f8"+
    "\0\u0af5\0\u0af5\0\ub24d\0\ub2a2\0\u0af5\0\ub2f7\0\ub34c\0\ub3a1"+
    "\0\ub3f6\0\ub44b\0\u0af5\0\ub4a0\0\u0af5\0\u0af5\0\ub4f5\0\ub54a"+
    "\0\ub59f\0\ub5f4\0\ub649\0\ub69e\0\u0af5\0\u0af5\0\ub6f3\0\ub748"+
    "\0\ub79d\0\ub7f2\0\u0af5\0\ub847\0\ub89c\0\u0af5\0\u0af5\0\u0af5"+
    "\0\ub8f1\0\ub946\0\ub99b\0\u0af5\0\ub9f0\0\uba45\0\uba9a\0\ubaef"+
    "\0\ubb44\0\u0af5\0\ubb99\0\u0af5\0\u0af5\0\ubbee\0\u0af5\0\ubc43"+
    "\0\u0af5\0\u07a3\0\ub847\0\ubc98\0\ubced\0\ubd42\0\ubd97\0\ubdec"+
    "\0\ube41\0\ube96\0\u0af5\0\ubeeb\0\ubf40\0\u0af5\0\u0af5\0\ubf95"+
    "\0\u0af5\0\ubfea\0\uc03f\0\uc094\0\uc0e9\0\u0af5\0\uc13e\0\uc193"+
    "\0\uc1e8\0\uc23d\0\uc292\0\uc2e7\0\uc33c\0\uc391\0\uc3e6\0\uc43b"+
    "\0\uc490\0\uc4e5\0\u07a3\0\uc53a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[756];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\34\26\1\27\70\26\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\31\2\42\1\30"+
    "\2\43\1\44\1\45\1\43\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\73\1\76\1\77\1\100"+
    "\1\101\1\72\1\102\1\71\1\103\1\104\1\105\1\74"+
    "\1\34\1\42\1\106\1\107\1\37\1\44\1\110\1\111"+
    "\1\106\1\112\1\110\1\76\1\100\1\103\1\113\1\42"+
    "\1\114\1\115\1\116\1\117\1\44\1\120\1\121\1\122"+
    "\1\42\1\123\1\124\2\42\1\125\23\126\1\127\1\130"+
    "\1\131\1\126\1\132\75\126\23\133\1\134\1\133\1\135"+
    "\1\130\1\136\75\133\5\137\1\140\21\137\1\141\14\137"+
    "\1\142\62\137\1\143\1\137\1\143\2\137\3\143\1\137"+
    "\2\143\1\137\2\43\2\137\1\43\22\137\27\143\1\137"+
    "\12\143\5\137\4\143\1\144\3\143\1\137\16\145\1\146"+
    "\3\145\1\147\1\150\1\145\1\151\1\145\1\152\75\145"+
    "\2\153\1\154\1\153\1\154\2\153\3\154\1\153\2\154"+
    "\2\153\1\155\25\153\27\154\1\153\12\154\5\153\4\154"+
    "\1\153\3\154\1\153\2\30\1\156\1\30\1\156\2\30"+
    "\3\156\1\30\2\156\1\30\1\0\1\157\25\30\27\156"+
    "\1\30\12\156\5\30\4\156\1\30\3\156\1\30\2\160"+
    "\1\161\1\160\1\161\2\160\3\161\2\160\1\161\1\160"+
    "\1\162\3\160\1\163\22\160\27\161\1\160\12\161\5\160"+
    "\4\161\1\160\3\161\1\160\2\164\1\165\1\164\1\165"+
    "\2\164\3\165\1\164\2\165\2\164\1\166\25\164\27\165"+
    "\1\164\12\165\5\164\4\165\1\164\3\165\1\164\2\30"+
    "\1\167\1\30\1\167\2\30\3\167\1\30\2\167\1\30"+
    "\1\170\1\171\2\30\1\172\22\30\27\167\1\30\12\167"+
    "\5\30\4\167\1\30\3\167\1\30\2\173\1\174\1\173"+
    "\1\174\1\175\1\173\3\174\1\173\2\174\1\173\2\43"+
    "\2\173\1\43\21\173\1\176\27\174\1\173\12\174\5\173"+
    "\4\174\1\173\3\174\3\173\1\174\1\173\1\174\2\173"+
    "\3\174\1\173\2\174\1\173\2\43\2\173\1\43\22\173"+
    "\27\174\1\173\12\174\1\173\1\177\3\173\4\174\1\173"+
    "\3\174\1\173\2\200\1\201\1\200\1\201\2\200\3\201"+
    "\1\200\2\201\1\200\2\43\2\200\1\43\22\200\27\201"+
    "\1\200\12\201\5\200\4\201\1\200\3\201\1\200\1\30"+
    "\1\202\1\42\1\203\1\42\1\30\1\204\3\42\1\202"+
    "\2\42\1\30\2\205\1\177\1\203\1\205\1\206\1\203"+
    "\1\205\2\203\6\30\1\203\5\30\1\203\27\42\1\203"+
    "\12\42\1\205\2\203\1\205\1\207\4\42\1\203\3\42"+
    "\1\203\35\210\1\211\67\210\35\212\1\213\67\212\16\214"+
    "\1\215\3\214\1\216\11\214\1\217\2\214\1\220\4\214"+
    "\1\221\60\214\16\222\2\223\2\222\1\223\102\222\125\224"+
    "\34\26\1\225\124\26\1\0\2\26\1\226\4\26\1\227"+
    "\5\26\1\0\1\26\1\0\4\26\1\230\1\0\6\26"+
    "\1\0\2\26\2\0\12\26\1\0\14\26\126\0\1\31"+
    "\1\231\1\232\1\233\1\0\1\31\3\0\1\31\54\0"+
    "\1\233\36\0\1\42\1\234\1\0\1\42\1\0\10\42"+
    "\27\0\27\42\1\0\12\42\5\0\4\42\1\0\3\42"+
    "\2\0\1\235\1\0\1\236\2\0\1\235\3\0\1\235"+
    "\15\0\1\66\75\0\2\42\1\0\1\42\1\0\1\42"+
    "\1\237\6\42\27\0\3\42\1\240\2\42\1\240\2\42"+
    "\1\241\6\42\1\242\3\42\1\243\1\244\1\237\1\0"+
    "\2\42\1\243\3\42\1\241\3\42\5\0\1\42\1\244"+
    "\2\42\1\0\1\242\2\42\6\0\1\66\22\0\1\66"+
    "\1\245\74\0\1\31\1\231\1\232\1\233\1\0\1\31"+
    "\1\246\1\0\1\247\1\31\51\0\1\247\2\0\1\233"+
    "\3\0\1\246\32\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\1\70\11\42\1\70\14\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\1\250\1\42\1\251\1\252\1\42\1\253"+
    "\1\252\3\42\1\250\1\251\13\42\1\0\3\42\1\253"+
    "\4\42\1\254\1\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\6\0\1\47\7\0"+
    "\1\255\10\0\1\42\1\256\13\42\1\256\11\42\1\0"+
    "\12\42\1\257\4\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\27\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\17\0\2\43\2\0\1\43"+
    "\104\0\1\260\1\0\1\260\2\0\3\260\1\0\2\260"+
    "\30\0\27\260\1\0\12\260\5\0\4\260\1\0\3\260"+
    "\1\0\23\261\1\262\1\263\1\264\1\261\1\265\75\261"+
    "\30\0\1\65\1\66\123\0\1\66\1\65\123\0\1\66"+
    "\1\0\1\66\122\0\1\65\124\0\1\266\1\66\2\0"+
    "\1\267\1\0\1\270\116\0\1\66\4\0\1\65\117\0"+
    "\1\66\4\0\1\271\1\272\116\0\1\66\1\273\123\0"+
    "\1\66\7\0\1\66\114\0\1\66\10\0\1\66\113\0"+
    "\1\66\101\0\1\274\23\0\1\275\12\0\1\65\61\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\1\42\1\276"+
    "\13\42\1\276\11\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\277\1\0\10\42\27\0"+
    "\22\42\1\277\4\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\3\42\1\300"+
    "\4\42\27\0\1\42\1\301\1\42\1\302\2\42\1\302"+
    "\5\42\1\303\1\301\1\42\1\300\7\42\1\0\1\42"+
    "\1\303\10\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\304\1\0\10\42\27\0\2\42\1\305\10\42"+
    "\1\305\6\42\1\304\4\42\1\0\10\42\1\306\1\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\307"+
    "\1\0\10\42\27\0\1\310\4\42\1\311\4\42\1\310"+
    "\7\42\1\307\4\42\1\0\3\42\1\311\6\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\2\42\1\312\5\42\27\0\3\42\1\313\2\42\1\314"+
    "\1\315\1\312\3\42\1\316\10\42\1\317\1\42\1\0"+
    "\1\42\1\316\10\42\5\0\1\42\1\317\2\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\1\42\1\320\13\42\1\320\11\42\1\0\11\42\1\321"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\1\250\1\42\1\251\1\252\1\42"+
    "\1\253\1\252\2\42\1\322\1\250\1\251\13\42\1\0"+
    "\3\42\1\253\4\42\1\254\1\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\5\42\1\323\21\42\1\0\3\42\1\323\6\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\1\42\1\276\13\42\1\276\1\42\1\324"+
    "\7\42\1\0\12\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\325\1\0\10\42\27\0\7\42\1\326"+
    "\12\42\1\325\4\42\1\0\5\42\1\327\4\42\5\0"+
    "\2\42\1\330\1\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\1\331\10\42\1\332\1\331"+
    "\14\42\1\0\6\42\1\332\3\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\6\0"+
    "\1\47\7\0\1\255\10\0\1\42\1\256\10\42\1\333"+
    "\2\42\1\256\11\42\1\0\12\42\1\257\4\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\2\42\1\334\7\42\1\335\1\334\13\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\1\336\1\42\1\337\6\42"+
    "\1\340\1\336\1\337\13\42\1\0\6\42\1\340\3\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\2\42\1\341\2\42\1\342\5\42"+
    "\1\341\13\42\1\0\12\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\1\42"+
    "\1\343\1\344\10\42\1\344\1\42\1\343\11\42\1\0"+
    "\10\42\1\345\1\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\325\1\0\10\42\27\0\7\42\1\327"+
    "\12\42\1\325\4\42\1\0\5\42\1\327\4\42\5\0"+
    "\2\42\1\330\1\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\2\42\1\312\5\42\27\0\3\42\1\313"+
    "\2\42\1\313\1\42\1\312\3\42\1\316\10\42\1\317"+
    "\1\42\1\0\1\42\1\316\10\42\5\0\1\42\1\317"+
    "\2\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\3\42\1\346\2\42\1\346\5\42\1\347"+
    "\12\42\1\0\1\42\1\347\10\42\5\0\4\42\1\0"+
    "\3\42\1\0\25\257\1\350\61\257\1\263\15\257\10\0"+
    "\1\351\1\352\5\0\1\353\25\0\1\354\1\355\1\356"+
    "\1\0\1\357\1\360\2\0\1\351\1\0\1\354\1\356"+
    "\1\361\1\355\1\0\1\352\1\0\1\357\7\0\1\361"+
    "\1\0\1\360\4\0\1\362\132\0\1\363\12\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\5\42\1\364\21\42"+
    "\1\0\3\42\1\364\6\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\2\42"+
    "\1\341\10\42\1\341\13\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\27\42\1\0\11\42\1\365\5\0\4\42\1\0"+
    "\3\42\121\0\1\366\5\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\2\42\1\334\10\42\1\334\13\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\1\0\23\126\1\367"+
    "\1\0\1\370\1\126\1\371\77\126\1\372\1\126\1\372"+
    "\2\126\3\372\1\126\1\373\1\372\6\126\1\374\1\375"+
    "\1\370\1\126\1\376\15\126\27\372\1\126\12\372\5\126"+
    "\4\372\1\126\3\372\151\126\1\377\1\375\1\370\1\126"+
    "\1\u0100\75\126\23\133\1\u0101\1\133\1\u0102\1\0\1\u0103"+
    "\77\133\1\372\1\133\1\372\2\133\3\372\1\133\1\u0104"+
    "\1\372\6\133\1\u0105\1\133\1\u0102\1\375\1\376\15\133"+
    "\27\372\1\133\12\372\5\133\4\372\1\133\3\372\151\133"+
    "\1\377\1\133\1\u0102\1\375\1\u0106\75\133\31\0\1\u0107"+
    "\116\0\1\377\106\0\1\u0108\120\0\2\143\1\0\1\143"+
    "\1\0\10\143\27\0\27\143\1\0\12\143\5\0\4\143"+
    "\1\0\3\143\121\0\1\u0109\4\0\16\145\1\0\3\145"+
    "\1\0\1\u010a\1\145\1\u010b\1\145\1\u010c\77\145\1\u010d"+
    "\1\145\1\u010d\2\145\3\u010d\1\145\2\u010d\1\145\1\0"+
    "\1\146\2\145\1\0\1\u010a\1\145\1\u010b\1\145\1\u010c"+
    "\15\145\27\u010d\1\145\12\u010d\5\145\4\u010d\1\145\3\u010d"+
    "\3\145\1\u010d\1\145\1\u010d\2\145\3\u010d\1\145\2\u010d"+
    "\1\145\1\u010e\1\146\2\145\1\0\1\u010a\1\145\1\u010b"+
    "\1\145\1\u010c\15\145\27\u010d\1\145\12\u010d\5\145\4\u010d"+
    "\1\145\3\u010d\1\145\2\0\1\372\1\0\1\372\2\0"+
    "\3\372\1\0\2\372\12\0\1\376\15\0\27\372\1\0"+
    "\12\372\5\0\4\372\1\0\3\372\1\0\125\145\16\154"+
    "\1\u010f\3\154\1\u010f\102\154\2\0\1\154\1\0\1\154"+
    "\2\0\3\154\1\0\2\154\2\0\1\u0110\25\0\27\154"+
    "\1\0\12\154\5\0\4\154\1\0\3\154\2\0\2\156"+
    "\1\0\1\156\1\0\10\156\3\0\1\u0111\23\0\27\156"+
    "\1\0\12\156\5\0\4\156\1\0\3\156\3\0\1\156"+
    "\1\0\1\156\2\0\3\156\1\0\2\156\2\0\1\u0112"+
    "\25\0\27\156\1\0\12\156\5\0\4\156\1\0\3\156"+
    "\1\0\16\160\1\0\3\160\1\0\103\160\2\u0113\1\160"+
    "\1\u0113\1\160\5\u0113\1\160\1\u0113\1\160\1\0\2\160"+
    "\1\u0114\1\0\22\160\27\u0113\1\160\12\u0113\5\160\4\u0113"+
    "\1\160\3\u0113\3\160\1\u0115\1\160\1\u0115\2\160\3\u0115"+
    "\1\160\2\u0115\1\160\1\u0116\1\u0117\2\160\1\u0116\22\160"+
    "\27\u0115\1\160\12\u0115\5\160\4\u0115\1\160\3\u0115\3\160"+
    "\1\u0115\1\160\1\u0115\2\160\3\u0115\1\160\2\u0115\1\160"+
    "\1\162\1\u0117\2\160\1\u0116\22\160\27\u0115\1\160\12\u0115"+
    "\5\160\4\u0115\1\160\3\u0115\1\160\16\u0118\1\u0119\3\u0118"+
    "\1\u0119\102\u0118\2\0\1\u0118\1\0\1\u0118\2\0\3\u0118"+
    "\1\0\2\u0118\2\0\1\u011a\25\0\27\u0118\1\0\12\u0118"+
    "\5\0\4\u0118\1\0\3\u0118\2\0\2\167\1\0\1\167"+
    "\1\0\10\167\3\0\1\u011b\23\0\27\167\1\0\12\167"+
    "\5\0\4\167\1\0\3\167\3\0\1\167\1\0\1\167"+
    "\2\0\3\167\1\0\2\167\1\0\1\170\1\u011c\2\0"+
    "\1\170\22\0\27\167\1\0\12\167\5\0\4\167\1\0"+
    "\3\167\3\0\1\167\1\0\1\167\2\0\3\167\1\0"+
    "\2\167\2\0\1\u011c\25\0\27\167\1\0\12\167\5\0"+
    "\4\167\1\0\3\167\2\0\2\174\1\0\1\174\1\0"+
    "\10\174\27\0\27\174\1\0\12\174\5\0\4\174\1\0"+
    "\3\174\32\0\1\u011d\100\0\1\u011e\120\0\2\u011f\1\0"+
    "\1\u011f\1\0\10\u011f\2\u0120\2\0\1\u0120\5\0\1\u0121"+
    "\14\0\27\u011f\1\0\12\u011f\5\0\4\u011f\1\0\3\u011f"+
    "\2\0\1\202\1\u0122\3\0\1\202\3\0\1\202\113\0"+
    "\1\202\1\u0122\3\0\1\202\1\246\2\0\1\202\60\0"+
    "\1\246\33\0\1\u0123\1\0\1\u0123\2\0\3\u0123\1\0"+
    "\2\u0123\30\0\27\u0123\1\0\12\u0123\5\0\4\u0123\1\0"+
    "\3\u0123\1\0\35\210\1\u0124\124\210\1\u0124\1\u0125\66\210"+
    "\35\212\1\u0126\124\212\1\u0126\1\u0127\66\212\16\214\1\215"+
    "\3\214\1\215\14\214\1\215\4\214\1\215\60\214\16\0"+
    "\1\u0128\106\0\16\214\1\215\3\214\1\215\13\214\1\u0129"+
    "\1\215\4\214\1\215\60\214\31\0\1\u012a\124\0\1\275"+
    "\111\0\2\223\2\0\1\223\102\0\34\26\1\0\2\26"+
    "\1\0\4\26\1\0\5\26\1\0\1\26\1\0\4\26"+
    "\2\0\6\26\1\0\2\26\2\0\12\26\1\0\14\26"+
    "\30\0\1\u012b\124\0\1\u012b\44\0\1\u012c\3\0\1\u012c"+
    "\114\0\1\u012d\5\0\1\u012d\26\0\1\31\4\0\1\31"+
    "\3\0\1\31\113\0\1\235\2\0\1\233\1\0\1\235"+
    "\3\0\1\235\54\0\1\233\36\0\1\202\3\0\1\u0122"+
    "\1\202\3\0\1\202\17\0\1\u0122\73\0\2\42\1\0"+
    "\1\42\1\0\2\42\1\u012e\5\42\27\0\3\42\1\u012f"+
    "\1\u0130\1\42\1\u012f\1\u0131\1\u012e\1\u0132\7\42\1\u0130"+
    "\2\42\1\u0133\1\u0134\1\42\1\0\2\42\1\u0133\2\42"+
    "\1\u0131\1\u0132\2\42\1\u0135\5\0\1\42\1\u0134\2\42"+
    "\1\0\3\42\2\0\1\235\1\u0136\1\0\1\233\1\0"+
    "\1\235\3\0\1\235\54\0\1\233\40\0\1\66\122\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\5\42\1\u0137"+
    "\1\42\1\u0138\17\42\1\0\3\42\1\u0137\1\42\1\u0138"+
    "\4\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\4\42\1\u0139\14\42\1\u0139"+
    "\5\42\1\0\12\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\14\42\1\u013a"+
    "\12\42\1\0\1\42\1\u013a\10\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\2\42\1\u013b\10\42\1\u013b\13\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\27\42\1\0\11\42\1\u013c\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\27\42\1\0\1\u013d\3\42\1\u013d\5\42\5\0"+
    "\4\42\1\0\3\42\2\0\1\u013e\2\0\1\u013e\1\0"+
    "\1\u013e\1\0\3\u013e\34\0\1\u013e\1\0\1\u013e\3\0"+
    "\1\u013e\2\0\1\u013e\3\0\1\u013e\1\0\2\u013e\1\0"+
    "\1\u013e\5\0\1\u013e\33\0\1\u013f\3\0\1\u013f\113\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\1\42\1\u0140"+
    "\13\42\1\u0140\11\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\11\42\1\u0141\15\42\1\0\6\42\1\u0141\3\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\3\42\1\u0142\2\42\1\u0142\20\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\3\42\1\u0143\2\42\1\u0143"+
    "\20\42\1\0\12\42\5\0\4\42\1\0\3\42\35\0"+
    "\1\u0144\71\0\2\42\1\0\1\u0145\1\0\10\42\27\0"+
    "\22\42\1\u0145\4\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\260\1\0\1\260\1\0\10\260\27\0"+
    "\27\260\1\0\12\260\5\0\4\260\1\0\3\260\1\0"+
    "\2\261\1\0\1\261\1\0\2\261\3\0\2\261\1\0"+
    "\6\261\1\262\1\263\1\264\1\261\1\0\15\261\27\0"+
    "\1\261\12\0\5\261\4\0\1\261\3\0\151\261\1\0"+
    "\1\263\1\264\1\261\1\265\75\261\31\0\1\66\123\0"+
    "\1\66\3\0\1\u0146\151\0\1\u0147\14\0\1\u0147\63\0"+
    "\1\u0148\105\0\2\273\2\0\1\273\133\0\1\u0149\111\0"+
    "\2\275\2\0\1\275\103\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\7\42\1\u014a\17\42\1\0\5\42\1\u014a"+
    "\4\42\5\0\4\42\1\0\2\42\1\u014b\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\14\42\1\u014c\12\42"+
    "\1\0\1\42\1\u014c\10\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\1\42"+
    "\1\u014d\13\42\1\u014d\11\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\4\42\1\276\14\42\1\276\5\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\27\42\1\0\12\42\5\0\2\42"+
    "\1\u014e\1\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\25\42\1\u014f\1\42\1\0\12\42"+
    "\5\0\1\42\1\u014f\2\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\11\42\1\u0150\15\42"+
    "\1\0\6\42\1\u0150\3\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\2\42\1\u0151\5\42"+
    "\27\0\10\42\1\u0151\13\42\1\u0152\2\42\1\0\2\42"+
    "\1\u0152\7\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\u0153\1\0\10\42\27\0\22\42\1\u0153\4\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\7\42\1\u0154\4\42"+
    "\1\u0155\7\42\1\u0156\2\42\1\0\1\42\1\u0155\1\u0156"+
    "\2\42\1\u0154\4\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\7\42\1\u0157"+
    "\4\42\1\u0155\7\42\1\u0156\2\42\1\0\1\42\1\u0155"+
    "\1\u0156\2\42\1\u0154\4\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\22\42"+
    "\1\u0158\4\42\1\0\12\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\14\42"+
    "\1\u0159\12\42\1\0\1\42\1\u0159\10\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\27\42\1\0\1\u015a\3\42\1\u015a\5\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\2\42\1\u015b\10\42\1\u015b\13\42\1\0"+
    "\10\42\1\u015c\1\42\5\0\1\u015d\3\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\1\42"+
    "\1\u015e\13\42\1\u015e\11\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\12\42\1\u015f\14\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\14\42\1\u0160\12\42\1\0\1\42\1\u0160\10\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\23\42\1\u0161\3\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\11\42\1\u0162\15\42\1\0\6\42"+
    "\1\u0162\3\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\2\42\1\u0163\10\42"+
    "\1\u0163\1\42\1\u0164\11\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\2\42\1\u0163\10\42\1\u0163\13\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\5\42\1\u0165\21\42\1\0\3\42"+
    "\1\u0165\6\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\7\42\1\u0166\17\42"+
    "\1\0\5\42\1\u0166\4\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\1\u0167"+
    "\11\42\1\u0167\14\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\12\42\1\u0168\14\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\1\42\1\u0169\13\42\1\u0169\11\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\5\42\1\u016a\21\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\3\42\1\u016b\2\42\1\u016b\20\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\7\42\1\u016c\1\42\1\u016d"+
    "\2\42\1\u016e\12\42\1\0\1\42\1\u016e\3\42\1\u016c"+
    "\1\u016d\3\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\1\u016f\1\42\1\u0170"+
    "\7\42\1\u016f\1\u0170\13\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\7\42\1\u0171\17\42\1\0\5\42\1\u0171\4\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\26\42\1\u0172\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\1\u0173\4\42\1\u0174\4\42\1\u0173\14\42"+
    "\1\0\3\42\1\u0174\6\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\1\42"+
    "\1\u0175\13\42\1\u0175\11\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\3\42"+
    "\1\u0176\4\42\27\0\17\42\1\u0176\7\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\14\42\1\u0177\12\42\1\0\1\42"+
    "\1\u0177\10\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\u0178\1\0\10\42\27\0\22\42\1\u0178\4\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\1\0\125\257"+
    "\56\0\1\u0179\24\0\1\u0179\66\0\1\u017a\4\0\1\u017b"+
    "\4\0\1\u017a\20\0\1\u017b\35\0\1\u017c\52\0\1\u017c"+
    "\44\0\1\u017d\62\0\1\u017d\103\0\1\u017e\13\0\1\u017e"+
    "\107\0\1\u017f\11\0\1\u017f\115\0\1\u0180\2\0\1\u0180"+
    "\125\0\1\u0181\25\0\1\u0181\72\0\1\u0182\2\0\1\u0182"+
    "\52\0\2\42\1\0\1\u0183\1\0\10\42\27\0\22\42"+
    "\1\u0183\4\42\1\0\12\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\5\42"+
    "\1\u0184\21\42\1\0\3\42\1\u0184\6\42\5\0\4\42"+
    "\1\0\3\42\1\0\2\126\1\0\1\126\1\0\2\126"+
    "\3\0\2\126\1\0\6\126\1\374\1\375\1\370\1\126"+
    "\1\0\15\126\27\0\1\126\12\0\5\126\4\0\1\126"+
    "\3\0\24\126\1\0\1\375\1\370\1\126\1\u0100\75\126"+
    "\1\0\2\372\1\0\1\372\1\0\10\372\27\0\27\372"+
    "\1\0\12\372\4\0\1\u0185\4\372\1\0\3\372\1\0"+
    "\1\126\2\373\1\126\1\373\1\126\10\373\5\126\1\367"+
    "\1\0\1\370\1\126\1\371\15\126\27\373\1\126\12\373"+
    "\4\126\1\u0186\4\373\1\126\3\373\1\126\2\133\1\0"+
    "\1\133\1\0\2\133\3\0\2\133\1\0\6\133\1\u0105"+
    "\1\133\1\u0102\1\375\1\0\15\133\27\0\1\133\12\0"+
    "\5\133\4\0\1\133\3\0\24\133\1\0\1\133\1\u0102"+
    "\1\375\1\u0106\76\133\2\u0104\1\133\1\u0104\1\133\10\u0104"+
    "\5\133\1\u0101\1\133\1\u0102\1\0\1\u0103\15\133\27\u0104"+
    "\1\133\12\u0104\4\133\1\u0187\4\u0104\1\133\3\u0104\1\133"+
    "\31\0\1\u0188\73\0\2\145\1\u0189\1\145\1\u0189\2\145"+
    "\3\u0189\2\145\1\u0189\1\145\1\0\3\145\1\0\1\u018a"+
    "\1\145\1\u010b\1\145\1\u018b\15\145\27\u0189\1\145\12\u0189"+
    "\5\145\4\u0189\1\145\3\u0189\17\145\1\0\3\145\1\0"+
    "\120\145\1\0\3\145\1\0\1\u018b\1\145\1\u010b\1\145"+
    "\1\u018c\75\145\16\u010d\1\u018d\3\u010d\1\u018d\102\u010d\2\0"+
    "\1\u010d\1\0\1\u010d\2\0\3\u010d\1\0\2\u010d\2\0"+
    "\1\u010e\25\0\27\u010d\1\0\12\u010d\5\0\4\u010d\1\0"+
    "\3\u010d\1\0\16\u0115\1\u018e\3\u0115\1\u018e\102\u0115\2\160"+
    "\1\u0113\1\160\1\u0113\2\160\3\u0113\2\160\1\u0113\1\160"+
    "\1\u0116\3\160\1\u0116\22\160\27\u0113\1\160\12\u0113\5\160"+
    "\4\u0113\1\160\3\u0113\3\160\1\u0115\1\160\1\u0115\2\160"+
    "\3\u0115\1\160\2\u0115\1\160\1\0\1\u0117\2\160\1\0"+
    "\22\160\27\u0115\1\160\12\u0115\5\160\4\u0115\1\160\3\u0115"+
    "\1\160\31\0\1\u018f\111\0\2\u0120\2\0\1\u0120\5\0"+
    "\1\u0121\75\0\1\202\4\0\1\202\3\0\1\202\113\0"+
    "\2\u0123\1\0\1\u0123\1\0\10\u0123\27\0\27\u0123\1\0"+
    "\12\u0123\5\0\4\u0123\1\0\3\u0123\1\0\35\210\1\u0124"+
    "\1\u0190\66\210\35\212\1\u0126\1\u0191\66\212\16\214\1\215"+
    "\3\214\1\215\14\214\1\215\4\214\1\215\14\214\1\u0192"+
    "\14\214\1\u0192\26\214\16\0\2\u012a\2\0\1\u012a\210\0"+
    "\1\u0193\64\0\1\u0194\13\0\1\u0194\43\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\5\42\1\u0195\21\42\1\0"+
    "\3\42\1\u0195\4\42\1\u0196\1\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\2\42\1\u0197\10\42\1\u0197\13\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\5\42\1\u0198\21\42\1\0\3\42\1\u0198"+
    "\6\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\1\42\1\u0199\13\42\1\u0199"+
    "\11\42\1\0\12\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\5\42\1\u019a"+
    "\21\42\1\0\3\42\1\u019a\6\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\11\42\1\u019b\15\42\1\0\6\42\1\u019b\3\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\u019c\1\0"+
    "\10\42\27\0\22\42\1\u019c\4\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\2\42\1\u019d\10\42\1\u019d\13\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\1\235\4\0"+
    "\1\235\3\0\1\235\113\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\7\42\1\u019e\17\42\1\0\5\42\1\u019e"+
    "\4\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\u019f\1\0\10\42\27\0\22\42\1\u019f\4\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\2\42\1\u01a0\5\42\27\0\4\42\1\u01a1"+
    "\1\u01a2\2\42\1\u01a0\3\42\1\u01a3\4\42\1\u01a1\5\42"+
    "\1\0\1\42\1\u01a3\1\42\1\u01a2\6\42\5\0\2\42"+
    "\1\u01a4\1\42\1\0\3\42\2\0\2\42\1\0\1\u01a5"+
    "\1\0\10\42\27\0\22\42\1\u01a5\4\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\11\42\1\u01a6\15\42\1\0\6\42"+
    "\1\u01a6\3\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\1\u01a7\11\42\1\u01a7"+
    "\14\42\1\0\12\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\7\42\1\u01a8"+
    "\17\42\1\0\5\42\1\u01a8\4\42\5\0\4\42\1\0"+
    "\3\42\2\0\1\u013e\1\246\1\0\1\u013e\1\0\1\u013e"+
    "\1\0\3\u013e\34\0\1\u013e\1\0\1\u013e\3\0\1\u013e"+
    "\2\0\1\u013e\3\0\1\u013e\1\0\2\u013e\1\0\1\u013e"+
    "\5\0\1\u013e\27\0\1\247\3\0\1\u013f\3\0\1\u013f"+
    "\113\0\2\42\1\0\1\u01a9\1\0\10\42\27\0\22\42"+
    "\1\u01a9\4\42\1\0\12\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\14\42"+
    "\1\u01aa\12\42\1\0\1\42\1\u01aa\10\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\2\42\1\u01ab\10\42\1\u01ab\13\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\24\42\1\u01ac\2\42\1\0\2\42"+
    "\1\u01ac\7\42\5\0\4\42\1\0\3\42\35\0\1\u0146"+
    "\71\0\2\42\1\0\1\42\1\0\10\42\27\0\2\42"+
    "\1\u01ad\10\42\1\u01ad\13\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\3\0\1\u01ae\1\0\1\u01ae\2\0\3\u01ae"+
    "\1\0\2\u01ae\2\0\1\u0146\4\0\1\u01af\20\0\27\u01ae"+
    "\1\0\12\u01ae\1\u01b0\4\0\4\u01ae\1\0\3\u01ae\72\0"+
    "\1\u01b1\5\0\1\u01b1\43\0\2\u01b2\2\0\1\u01b2\103\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\27\42\1\0"+
    "\10\42\1\u01b3\1\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\27\42\1\0"+
    "\10\42\1\u01b4\1\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\7\42\1\u01b5"+
    "\17\42\1\0\5\42\1\u01b5\4\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\2\42\1\u01b6\10\42\1\u01b6\13\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\u01b7\1\0"+
    "\10\42\27\0\22\42\1\u01b7\4\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\11\42\1\u01b8\15\42\1\0\6\42\1\u01b8"+
    "\3\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\2\42\1\u01b9\10\42\1\u01b9"+
    "\13\42\1\0\12\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\11\42\1\u01ba"+
    "\15\42\1\0\6\42\1\u01ba\3\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\u01bb\1\0\10\42\27\0"+
    "\22\42\1\u01bb\4\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\7\42\1\u01bc\17\42\1\0\5\42\1\u01bc\4\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\11\42\1\u01bd\15\42\1\0\6\42\1\u01bd"+
    "\3\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\15\42\1\u01be\11\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\u01bf\1\0\10\42\27\0\22\42\1\u01bf\4\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\11\42\1\u01c0\15\42\1\0"+
    "\6\42\1\u01c0\3\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\5\42\1\u01c1"+
    "\21\42\1\0\3\42\1\u01c1\6\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\u01c2\1\0\10\42\27\0"+
    "\22\42\1\u01c2\4\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\1\u01c3\11\42\1\u01c3\14\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\13\42\1\u01c4\13\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\7\42\1\u01c5\17\42\1\0\5\42\1\u01c5\4\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\22\42\1\u01c6\4\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\2\42\1\u01c7\5\42\27\0\10\42\1\u01c7\16\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\7\42\1\u01c8\17\42"+
    "\1\0\5\42\1\u01c8\4\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\5\42"+
    "\1\u01c9\21\42\1\0\12\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\7\42"+
    "\1\u01ca\17\42\1\0\5\42\1\u01ca\4\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\1\u01cb\11\42\1\u01cb\14\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\3\42\1\u01cc\4\42\27\0\17\42\1\u01cc\7\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\11\42\1\u01cd\15\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\21\42\1\u01ce\5\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\7\42\1\u01cf\4\42\1\u01d0"+
    "\12\42\1\0\1\42\1\u01d0\3\42\1\u01cf\4\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\24\42\1\u01d1\2\42\1\0\2\42\1\u01d1"+
    "\7\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\11\42\1\u01d2\15\42\1\0"+
    "\6\42\1\u01d2\3\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\u01d3\1\0\10\42\27\0\22\42\1\u01d3"+
    "\4\42\1\0\12\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\3\42\1\u01d4"+
    "\2\42\1\u01d4\20\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\14\42\1\u01d5\12\42\1\0\1\42\1\u01d5\10\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\24\42\1\u01d6\2\42\1\0\2\42\1\u01d6"+
    "\7\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\22\42\1\u01d7\4\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\7\42\1\u01d8\17\42\1\0"+
    "\5\42\1\u01d8\4\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\3\42\1\u01d9"+
    "\2\42\1\u01d9\11\42\1\u01da\6\42\1\0\12\42\5\0"+
    "\4\42\1\0\1\u01da\2\42\2\0\2\42\1\0\1\u01db"+
    "\1\0\10\42\27\0\22\42\1\u01db\4\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\11\42\1\u01dc\15\42\1\0\6\42"+
    "\1\u01dc\3\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\u01dd\1\0\10\42\27\0\22\42\1\u01dd\4\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\46\0\1\u01de"+
    "\11\0\1\u01de\112\0\1\u01df\11\0\1\u01df\115\0\1\u01e0"+
    "\2\0\1\u01e0\141\0\1\u01e1\31\0\1\u01e1\51\0\1\u01e2"+
    "\10\0\1\u01e2\112\0\1\u01e3\13\0\1\u01e3\147\0\1\u01e4"+
    "\73\0\1\u01e5\25\0\1\u01e5\70\0\1\u01e6\13\0\1\u01e6"+
    "\123\0\1\u01e7\14\0\1\u01e7\27\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\11\42\1\u01e8\15\42\1\0\6\42"+
    "\1\u01e8\3\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\11\42\1\u01e9\15\42"+
    "\1\0\6\42\1\u01e9\3\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\u0189\1\0\1\u0189\1\0\10\u0189\27\0\27\u0189"+
    "\1\0\12\u0189\4\0\1\u01ea\4\u0189\1\0\3\u0189\1\0"+
    "\2\145\1\0\1\145\1\0\2\145\3\0\2\145\1\0"+
    "\1\145\1\0\3\145\1\0\1\u018a\1\145\1\u010b\1\145"+
    "\1\0\15\145\27\0\1\145\12\0\5\145\4\0\1\145"+
    "\3\0\17\145\1\0\3\145\2\0\1\145\1\u010b\1\145"+
    "\1\u018c\75\145\16\214\1\215\3\214\1\215\14\214\1\215"+
    "\4\214\1\215\24\214\1\u01eb\5\214\1\u01eb\25\214\75\0"+
    "\1\u01ec\3\0\1\u01ec\75\0\1\u01ed\25\0\1\u01ed\25\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\11\42\1\u01ee"+
    "\15\42\1\0\6\42\1\u01ee\3\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\3\42\1\u01ef\2\42\1\u01ef\20\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\25\42\1\u01f0\1\42\1\0\12\42\5\0"+
    "\1\42\1\u01f0\2\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\1\42\1\u01f1\13\42\1\u01f1"+
    "\11\42\1\0\12\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\2\42\1\u01f2"+
    "\10\42\1\u01f2\13\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\3\42\1\u01f3\2\42\1\u01f3\20\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\2\42\1\u01f4\10\42\1\u01f4\13\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\7\42\1\u01f5\17\42\1\0"+
    "\5\42\1\u01f5\4\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\11\42\1\u01f6"+
    "\15\42\1\0\6\42\1\u01f6\3\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\3\42\1\u01f7\2\42\1\u01f7\20\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\1\u01f8\11\42\1\u01f8\14\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\u01f9"+
    "\1\0\10\42\27\0\22\42\1\u01f9\4\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\2\42\1\u01fa\5\42\27\0\10\42\1\u01fa\16\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\27\42\1\0\12\42"+
    "\5\0\2\42\1\u01fb\1\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\27\42\1\0\11\42"+
    "\1\u01fc\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\5\42\1\u01fd\21\42\1\0"+
    "\3\42\1\u01fd\6\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\27\42\1\0"+
    "\12\42\5\0\1\u01fe\3\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\2\42\1\u01ff\10\42"+
    "\1\u01ff\13\42\1\0\12\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\u0200\1\0\10\42\27\0\22\42"+
    "\1\u0200\4\42\1\0\12\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\11\42"+
    "\1\u0201\15\42\1\0\6\42\1\u0201\3\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\7\42\1\u0202\17\42\1\0\5\42\1\u0202\4\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\27\42\1\0\12\42\5\0\3\42"+
    "\1\u0203\1\0\3\42\2\0\2\u01ae\1\0\1\u01ae\1\0"+
    "\10\u01ae\1\u0204\3\0\1\u0205\22\0\27\u01ae\1\0\12\u01ae"+
    "\5\0\4\u01ae\1\0\3\u01ae\3\0\1\u0206\1\0\1\u0206"+
    "\2\0\3\u0206\1\0\2\u0206\30\0\27\u0206\1\0\12\u0206"+
    "\5\0\4\u0206\1\0\3\u0206\3\0\1\u0207\1\0\1\u0207"+
    "\2\0\3\u0207\1\0\2\u0207\30\0\27\u0207\1\0\12\u0207"+
    "\5\0\4\u0207\1\0\3\u0207\47\0\1\u0208\13\0\1\u0208"+
    "\43\0\2\42\1\0\1\42\1\0\10\42\27\0\1\42"+
    "\1\u0209\13\42\1\u0209\11\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\5\42\1\u020a\21\42\1\0\3\42\1\u020a\6\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\1\42\1\u020b\13\42\1\u020b\11\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\27\42\1\0\12\42"+
    "\5\0\1\u020c\3\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\14\42\1\u020d\12\42\1\0"+
    "\1\42\1\u020d\10\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\27\42\1\0"+
    "\10\42\1\u020e\1\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\2\42\1\u020f"+
    "\10\42\1\u020f\13\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\1\42\1\u0210\13\42\1\u0210\11\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\u0211\1\0"+
    "\10\42\27\0\2\42\1\u0212\10\42\1\u0212\6\42\1\u0211"+
    "\4\42\1\0\12\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\27\42\1\0"+
    "\10\42\1\u0213\1\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\13\42\1\u0214"+
    "\13\42\1\0\12\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\7\42\1\u0215"+
    "\17\42\1\0\5\42\1\u0215\4\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\u0216\1\0\10\42\27\0"+
    "\22\42\1\u0216\4\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\7\42\1\u0217\17\42\1\0\5\42\1\u0217\4\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\27\42\1\0\12\42\5\0\2\42\1\u0218"+
    "\1\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\7\42\1\u0219\17\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\24\42\1\u021a\2\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\5\42\1\u021b\21\42\1\0\3\42\1\u021b"+
    "\6\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\6\42\1\u021c\20\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\24\42\1\u021d\2\42\1\0"+
    "\2\42\1\u021d\7\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\2\42\1\u021e"+
    "\10\42\1\u021e\13\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\5\42\1\u021f\21\42\1\0\3\42\1\u021f\6\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\7\42\1\u0220\17\42\1\0\5\42\1\u0220"+
    "\4\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\27\42\1\0\11\42\1\u0221"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\2\42\1\u0222\10\42\1\u0222\13\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\u0223\1\0\10\42\27\0\22\42\1\u0223\4\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\14\42\1\u0224\12\42"+
    "\1\0\1\42\1\u0224\10\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\27\42"+
    "\1\0\11\42\1\u0225\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\21\42\1\u0226"+
    "\5\42\1\0\12\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\u0227\1\0\10\42\27\0\22\42\1\u0227"+
    "\4\42\1\0\12\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\7\42\1\u0228"+
    "\17\42\1\0\5\42\1\u0228\4\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\2\42\1\u0229\10\42\1\u0229\13\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\3\42\1\u022a\2\42\1\u022a\20\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\5\42\1\u022b\21\42\1\0"+
    "\3\42\1\u022b\6\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\7\42\1\u022c"+
    "\17\42\1\0\5\42\1\u022c\4\42\5\0\4\42\1\0"+
    "\3\42\50\0\1\u022d\10\0\1\u022d\122\0\1\u022e\24\0"+
    "\1\u022e\70\0\1\u022f\10\0\1\u022f\50\0\1\u0230\62\0"+
    "\1\u0230\113\0\1\u0231\24\0\1\u0231\70\0\1\u0232\10\0"+
    "\1\u0232\55\0\1\u0233\52\0\1\u0233\44\0\1\u0234\12\0"+
    "\1\u0231\47\0\1\u0234\4\0\1\u0235\102\0\1\u0236\25\0"+
    "\1\u0236\30\0\1\u022d\62\0\1\u022d\36\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\4\42\1\u0237\14\42\1\u0237"+
    "\5\42\1\0\12\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\u0238\1\0\10\42\27\0\22\42\1\u0238"+
    "\4\42\1\0\12\42\5\0\4\42\1\0\3\42\1\0"+
    "\16\214\1\215\3\214\1\215\14\214\1\215\4\214\1\215"+
    "\1\214\1\u0239\13\214\1\u0239\42\214\75\0\1\u023a\3\0"+
    "\1\u023a\24\0\2\42\1\0\1\u023b\1\0\10\42\27\0"+
    "\22\42\1\u023b\4\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\24\42\1\u023c\2\42\1\0\2\42\1\u023c\7\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\u023d\1\0"+
    "\10\42\27\0\22\42\1\u023d\4\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\1\42\1\u023e\1\0\1\42"+
    "\1\0\10\42\27\0\27\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\5\42\1\u023f\21\42\1\0\3\42\1\u023f\6\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\u0240"+
    "\1\0\10\42\27\0\22\42\1\u0240\4\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\14\42\1\u0241\12\42\1\0\1\42"+
    "\1\u0241\10\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\27\42\1\0\11\42"+
    "\1\u0242\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\7\42\1\u0243\17\42\1\0"+
    "\5\42\1\u0243\4\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\4\42\1\u0244"+
    "\14\42\1\u0244\5\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\1\42\1\u0245\13\42\1\u0245\11\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\24\42\1\u0246\2\42\1\0\2\42\1\u0246"+
    "\7\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\5\42\1\u0247\21\42\1\0"+
    "\3\42\1\u0247\6\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\5\42\1\u0248"+
    "\21\42\1\0\3\42\1\u0248\6\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\2\42\1\u0249"+
    "\5\42\27\0\10\42\1\u0249\16\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\24\42\1\u024a\2\42\1\0\2\42\1\u024a"+
    "\7\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\11\42\1\u024b\15\42\1\0"+
    "\6\42\1\u024b\3\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\5\42\1\u024c"+
    "\21\42\1\0\3\42\1\u024c\6\42\5\0\4\42\1\0"+
    "\3\42\17\0\1\u0204\107\0\2\u0206\1\0\1\u0206\1\0"+
    "\10\u0206\6\0\1\u024d\20\0\27\u0206\1\0\12\u0206\5\0"+
    "\4\u0206\1\0\3\u0206\2\0\2\u0207\1\0\1\u0207\1\0"+
    "\10\u0207\27\0\27\u0207\1\0\12\u0207\1\u024e\4\0\4\u0207"+
    "\1\0\3\u0207\53\0\1\u024f\25\0\1\u024f\25\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\3\42\1\u0250\2\42"+
    "\1\u0250\20\42\1\0\12\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\1\42"+
    "\1\u0251\13\42\1\u0251\11\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\2\42\1\u0252\10\42\1\u0252\13\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\27\42\1\0\1\u0253\3\42\1\u0253"+
    "\5\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\11\42\1\u0254\15\42\1\0"+
    "\6\42\1\u0254\3\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\1\42\1\u0255"+
    "\13\42\1\u0255\11\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\2\42\1\u0256"+
    "\5\42\27\0\10\42\1\u0256\16\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\2\42\1\u0257\10\42\1\u0257\13\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\3\42\1\u0258\2\42\1\u0258"+
    "\20\42\1\0\12\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\4\42\1\u0259"+
    "\14\42\1\u0259\5\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\17\42\1\u025a\7\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\25\42\1\u025b\1\42\1\0\12\42\5\0\1\42\1\u025b"+
    "\2\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\7\42\1\u025c\17\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\24\42\1\u025d\2\42\1\0\2\42\1\u025d"+
    "\7\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\16\42\1\u025e\10\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\27\42\1\0\11\42\1\u025f"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\11\42\1\u0260\15\42\1\0\6\42"+
    "\1\u0260\3\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\3\42\1\u0261\2\42"+
    "\1\u0261\20\42\1\0\12\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\3\42\1\u0262\4\42"+
    "\27\0\17\42\1\u0262\7\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\24\42\1\u0263\2\42\1\0\2\42\1\u0263\7\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\7\42\1\u0264\17\42\1\0\5\42"+
    "\1\u0264\4\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\7\42\1\u0265\17\42"+
    "\1\0\5\42\1\u0265\4\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\24\42"+
    "\1\u0266\2\42\1\0\2\42\1\u0266\7\42\5\0\4\42"+
    "\1\0\3\42\55\0\1\u0231\25\0\1\u0231\26\0\1\u0267"+
    "\12\0\1\u0231\47\0\1\u0267\4\0\1\u0235\76\0\1\u0232"+
    "\13\0\1\u0232\133\0\1\u022d\5\0\1\u022d\44\0\1\u0231"+
    "\54\0\1\u0235\144\0\1\u0231\66\0\1\u0268\24\0\1\u0268"+
    "\104\0\1\u0269\20\0\1\u0269\70\0\1\u026a\2\0\1\u026a"+
    "\52\0\2\42\1\0\1\42\1\0\10\42\2\u026b\2\0"+
    "\1\u026b\22\0\27\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\1\0\16\214\1\215\3\214\1\215\14\214\1\215"+
    "\4\214\1\215\5\214\1\u026c\25\214\1\u026c\24\214\54\0"+
    "\1\u026d\25\0\1\u026d\23\0\1\42\1\u026e\1\0\1\42"+
    "\1\0\10\42\27\0\27\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\7\42\1\u026f\17\42\1\0\5\42\1\u026f\4\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\14\42\1\u0270\12\42\1\0\1\42"+
    "\1\u0270\10\42\5\0\4\42\1\0\3\42\2\0\1\42"+
    "\1\u0271\1\0\1\42\1\0\10\42\27\0\27\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\7\42\1\u0272\17\42\1\0"+
    "\5\42\1\u0272\4\42\5\0\4\42\1\0\3\42\2\0"+
    "\1\42\1\u0273\1\0\1\42\1\0\10\42\27\0\27\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\14\42\1\u0274\12\42"+
    "\1\0\1\42\1\u0274\10\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\1\u0275"+
    "\11\42\1\u0275\14\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\1\42\1\u0276\1\0\1\42\1\0\10\42"+
    "\27\0\27\42\1\0\12\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\14\42"+
    "\1\u0277\12\42\1\0\1\42\1\u0277\10\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\u0278\1\0\10\42"+
    "\27\0\22\42\1\u0278\4\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\11\42\1\u0279\15\42\1\0\6\42\1\u0279\3\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\7\42\1\u027a\17\42\1\0\5\42"+
    "\1\u027a\4\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\11\42\1\u027b\15\42"+
    "\1\0\6\42\1\u027b\3\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\27\42"+
    "\1\0\11\42\1\u027c\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\27\42\1\0"+
    "\12\42\5\0\1\u027d\3\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\1\u027e\11\42\1\u027e"+
    "\14\42\1\0\12\42\5\0\4\42\1\0\3\42\17\0"+
    "\1\u0204\3\0\1\u0205\120\0\1\u027f\3\0\1\u0280\177\0"+
    "\1\u0281\3\0\1\u0281\24\0\2\42\1\0\1\u0282\1\0"+
    "\10\42\27\0\22\42\1\u0282\4\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\24\42\1\u0283\2\42\1\0\2\42\1\u0283"+
    "\7\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\2\42\1\u0284\10\42\1\u0284"+
    "\13\42\1\0\12\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\7\42\1\u0285"+
    "\17\42\1\0\5\42\1\u0285\4\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\u0286\1\0\10\42\27\0"+
    "\22\42\1\u0286\4\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\2\42\1\u0287\10\42\1\u0287\13\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\4\42\1\u0288\14\42\1\u0288\5\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\24\42\1\u0289\2\42\1\0"+
    "\2\42\1\u0289\7\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\u028a\1\0\10\42\27\0\22\42\1\u028a"+
    "\4\42\1\0\12\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\11\42\1\u028b"+
    "\15\42\1\0\12\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\u028c\1\0\10\42\27\0\22\42\1\u028c"+
    "\4\42\1\0\12\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\27\42\1\0"+
    "\10\42\1\u028d\1\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\11\42\1\u028e"+
    "\15\42\1\0\6\42\1\u028e\3\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\7\42\1\u028f\17\42\1\0\5\42\1\u028f\4\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\u0290\1\0"+
    "\10\42\27\0\22\42\1\u0290\4\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\50\0\1\u0291\10\0\1\u0291\50\0"+
    "\1\u0231\62\0\1\u0231\41\0\1\u0292\62\0\1\u0292\120\0"+
    "\1\u0231\20\0\1\u0231\30\0\1\u0293\5\0\2\u026b\2\0"+
    "\1\u026b\32\0\1\u0293\47\0\16\214\1\215\3\214\1\215"+
    "\14\214\1\215\4\214\1\215\30\214\1\u0294\3\214\1\u0294"+
    "\23\214\16\0\2\u0295\2\0\1\u0295\103\0\1\42\1\u0296"+
    "\1\0\1\42\1\0\10\42\27\0\27\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\5\42\1\u0297\21\42\1\0\3\42"+
    "\1\u0297\6\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\27\42\1\0\1\u0298"+
    "\3\42\1\u0298\5\42\5\0\4\42\1\0\3\42\2\0"+
    "\1\42\1\u0299\1\0\1\42\1\0\10\42\27\0\27\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\2\0\1\42"+
    "\1\u029a\1\0\1\42\1\0\10\42\27\0\27\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\1\42\1\u029b"+
    "\1\0\1\42\1\0\10\42\27\0\27\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\4\42\1\u029c\14\42\1\u029c\5\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\24\42\1\u029d\2\42"+
    "\1\0\2\42\1\u029d\7\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\2\42"+
    "\1\u029e\10\42\1\u029e\13\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\2\42\1\u029f\10\42\1\u029f\13\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\24\42\1\u02a0\2\42\1\0\2\42"+
    "\1\u02a0\7\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\u02a1\1\0\10\42\27\0\22\42\1\u02a1\4\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\3\42\1\u02a2\2\42"+
    "\1\u02a2\20\42\1\0\12\42\5\0\4\42\1\0\3\42"+
    "\17\0\1\u027f\162\0\1\u02a3\25\0\1\u02a3\23\0\1\42"+
    "\1\u02a4\1\0\1\42\1\0\10\42\27\0\27\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\7\42\1\u02a5\17\42\1\0"+
    "\5\42\1\u02a5\4\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\24\42\1\u02a6"+
    "\2\42\1\0\2\42\1\u02a6\7\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\24\42\1\u02a7\2\42\1\0\2\42\1\u02a7\7\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\1\u02a8\11\42\1\u02a8\14\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\u02a9"+
    "\1\0\10\42\27\0\22\42\1\u02a9\4\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\1\42\1\u02aa\1\0"+
    "\1\42\1\0\10\42\27\0\27\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\22\42\1\u02ab\4\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\3\42\1\u02ac\2\42\1\u02ac\20\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\u02ad\1\0\10\42\27\0\22\42\1\u02ad\4\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\u02ae\1\0\10\42\27\0\22\42\1\u02ae\4\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\u02af\1\0\10\42\27\0\22\42\1\u02af\4\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\51\0\1\u0231\2\0"+
    "\1\u0231\117\0\1\u0231\13\0\1\u0231\110\0\1\u02b0\13\0"+
    "\1\u02b0\42\0\16\214\1\215\3\214\1\215\14\214\1\215"+
    "\4\214\1\215\7\214\1\u02b1\25\214\1\u02b1\22\214\16\0"+
    "\2\u0295\2\0\1\u0295\33\0\1\u02b2\24\0\1\u02b2\22\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\1\u02b3\11\42"+
    "\1\u02b3\14\42\1\0\12\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\2\42"+
    "\1\u02b4\10\42\1\u02b4\13\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\2\0\1\42\1\u02b5\1\0\1\42\1\0"+
    "\10\42\27\0\27\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\1\42\1\u02b6\1\0\1\42\1\0\10\42"+
    "\27\0\27\42\1\0\12\42\5\0\4\42\1\0\3\42"+
    "\2\0\1\42\1\u02b7\1\0\1\42\1\0\10\42\27\0"+
    "\27\42\1\0\12\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\1\u02b8\11\42"+
    "\1\u02b8\14\42\1\0\12\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\24\42"+
    "\1\u02b9\2\42\1\0\2\42\1\u02b9\7\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\1\42\1\u02ba\13\42\1\u02ba\11\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\27\42\1\0\11\42\1\u02bb\5\0"+
    "\4\42\1\0\3\42\32\0\1\u02bc\74\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\1\u02bd\11\42\1\u02bd\14\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\u02be\1\0\10\42\27\0\22\42\1\u02be\4\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\u02bf\1\0\10\42\27\0\22\42\1\u02bf\4\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\2\42\1\u02c0\5\42\27\0\10\42"+
    "\1\u02c0\16\42\1\0\12\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\1\u02c1"+
    "\11\42\1\u02c1\14\42\1\0\12\42\5\0\4\42\1\0"+
    "\3\42\2\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\1\u02c2\11\42\1\u02c2\14\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\2\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\7\42\1\u02c3\17\42\1\0\5\42\1\u02c3\4\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\4\42\1\u02c4\14\42\1\u02c4\5\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\46\0\1\u02c5"+
    "\11\0\1\u02c5\45\0\16\214\1\215\3\214\1\215\6\214"+
    "\1\u02c6\5\214\1\215\4\214\1\215\60\214\47\0\1\u02c7"+
    "\10\0\1\u02c7\45\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\3\42\1\u02c8\2\42\1\u02c8\20\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\24\42\1\u02c9\2\42\1\0\2\42"+
    "\1\u02c9\7\42\5\0\4\42\1\0\3\42\2\0\1\42"+
    "\1\u02ca\1\0\1\42\1\0\10\42\27\0\27\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\25\42\1\u02cb\1\42\1\0"+
    "\12\42\5\0\1\42\1\u02cb\2\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\27\42\1\0"+
    "\11\42\1\u02cc\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\u02cd\1\0\10\42\27\0\22\42\1\u02cd\4\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\17\0\2\u02bc"+
    "\2\0\1\u02bc\103\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\3\42\1\u02ce\2\42\1\u02ce\20\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\2\42\1\u02cf\5\42\27\0\10\42\1\u02cf\16\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\3\42\1\u02d0\2\42"+
    "\1\u02d0\20\42\1\0\12\42\5\0\4\42\1\0\3\42"+
    "\2\0\2\42\1\0\1\42\1\0\10\42\27\0\14\42"+
    "\1\u02d1\12\42\1\0\1\42\1\u02d1\10\42\5\0\4\42"+
    "\1\0\3\42\73\0\1\u02d2\22\0\1\u02d2\7\0\16\214"+
    "\1\u02d3\1\u02c6\2\214\1\u02d3\14\214\1\215\4\214\1\215"+
    "\60\214\50\0\1\u02d4\2\0\1\u02d4\52\0\1\42\1\u02d5"+
    "\1\0\1\42\1\0\10\42\27\0\27\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\u02d6"+
    "\1\0\10\42\27\0\22\42\1\u02d6\4\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\27\42\1\0\1\u02d7\3\42\1\u02d7"+
    "\5\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\24\42\1\u02d8\2\42\1\0"+
    "\2\42\1\u02d8\7\42\5\0\4\42\1\0\3\42\2\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\24\42\1\u02d9"+
    "\2\42\1\0\2\42\1\u02d9\7\42\5\0\4\42\1\0"+
    "\3\42\64\0\1\u02da\20\0\1\u02da\21\0\1\42\1\u02db"+
    "\1\0\1\42\1\0\10\42\27\0\27\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\2\0\1\42\1\u02dc\1\0"+
    "\1\42\1\0\10\42\27\0\27\42\1\0\12\42\5\0"+
    "\4\42\1\0\3\42\2\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\5\42\1\u02dd\21\42\1\0\3\42\1\u02dd"+
    "\6\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\u02de\1\0\10\42\27\0\22\42\1\u02de\4\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\2\0\2\42\1\0"+
    "\1\u02df\1\0\10\42\27\0\22\42\1\u02df\4\42\1\0"+
    "\12\42\5\0\4\42\1\0\3\42\106\0\1\u02e0\20\0"+
    "\1\42\1\u02e1\1\0\1\42\1\0\10\42\27\0\27\42"+
    "\1\0\12\42\5\0\4\42\1\0\3\42\2\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\11\42\1\u02e2\15\42"+
    "\1\0\6\42\1\u02e2\3\42\5\0\4\42\1\0\3\42"+
    "\50\0\1\u02e3\10\0\1\u02e3\45\0\2\42\1\0\1\u02e4"+
    "\1\0\10\42\27\0\22\42\1\u02e4\4\42\1\0\12\42"+
    "\5\0\4\42\1\0\3\42\64\0\1\u02e5\20\0\1\u02e5"+
    "\21\0\2\42\1\0\1\42\1\0\10\42\27\0\1\42"+
    "\1\u02e6\13\42\1\u02e6\11\42\1\0\12\42\5\0\4\42"+
    "\1\0\3\42\5\0\1\u02e7\62\0\1\u02e7\53\0\2\u02e7"+
    "\2\0\1\u02e7\5\0\1\u02e8\112\0\2\u02e8\2\0\1\u02e8"+
    "\1\0\1\u02e9\50\0\1\u02ea\3\0\1\u02ea\5\0\1\u02eb"+
    "\112\0\1\u02ec\3\0\1\u02ec\131\0\1\u02ed\113\0\1\u02ee"+
    "\3\0\1\u02ee\131\0\1\u02ef\113\0\1\u02f0\3\0\1\u02f0"+
    "\131\0\1\u02f1\113\0\1\u02f2\3\0\1\u02f2\41\0\2\u02f0"+
    "\2\0\1\u02f0\6\0\1\u02f3\170\0\1\u02f4\3\0\1\u02f4"+
    "\47\0\1\u02f0\207\0\1\u02f0\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[50575];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\25\0\2\1\1\11\13\1\2\11\2\1\3\11\13\1"+
    "\1\11\27\1\1\11\6\1\1\11\2\1\1\11\6\1"+
    "\1\11\13\1\1\11\10\1\1\11\3\1\1\0\2\1"+
    "\1\11\3\1\2\11\2\1\1\11\1\1\1\11\1\1"+
    "\1\11\4\0\1\1\1\11\4\1\1\11\2\1\1\0"+
    "\2\1\2\0\1\1\1\0\2\1\1\0\6\1\1\11"+
    "\2\0\5\1\1\0\1\1\1\0\1\1\2\0\1\11"+
    "\2\0\2\1\1\0\1\1\1\11\1\1\1\0\53\1"+
    "\13\0\1\11\2\1\1\11\3\0\3\1\3\11\1\1"+
    "\3\0\3\1\1\11\1\0\1\11\3\0\1\1\1\0"+
    "\1\11\1\0\1\11\3\0\1\1\1\0\2\1\1\11"+
    "\1\0\1\11\1\0\1\11\3\0\1\11\1\0\1\1"+
    "\1\0\1\11\1\0\2\11\2\1\1\11\2\0\10\1"+
    "\1\0\15\1\1\0\1\1\3\0\1\11\57\1\12\0"+
    "\2\1\1\11\2\1\1\11\1\1\1\0\1\11\1\0"+
    "\5\11\1\1\2\0\31\1\4\0\54\1\12\0\2\1"+
    "\1\11\1\1\1\11\1\0\26\1\1\11\1\1\3\0"+
    "\44\1\10\0\1\11\1\0\3\1\1\0\22\1\3\0"+
    "\27\1\5\0\23\1\1\11\1\1\1\0\17\1\3\0"+
    "\1\1\1\0\15\1\1\0\14\1\1\0\1\1\1\0"+
    "\22\1\1\0\1\1\1\0\12\1\1\11\1\1\1\0"+
    "\5\1\1\0\5\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\14\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[756];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private final ByteStack stack = new ByteStack();
    private String heredoc = null;
    private int hereocLength = 0;
    private int parenBalanceInConst = 0; // for context sensitive lexer
    private int bracketBalanceInConst = 0; // for context sensitive lexer
    private boolean aspTagsAllowed;
    private boolean shortTagsAllowed;
    private boolean isInConst;
    private LexerInput input;

    public PHP5ColoringLexer(LexerRestartInfo info, boolean shortTagsAllowed, boolean aspTagsAllowed, boolean inPHP) {
        this.input = info.input();
        this.aspTagsAllowed = aspTagsAllowed;
        this.shortTagsAllowed = shortTagsAllowed;

        if (info.state() != null) {
            //reset state
            setState((LexerState) info.state());
        } else {
            //initial state
            stack.push(YYINITIAL);
            if (inPHP) {
                stack.push(ST_PHP_IN_SCRIPTING);
                zzState = ST_PHP_IN_SCRIPTING;
                zzLexicalState = ST_PHP_IN_SCRIPTING;
            } else {
                zzState = YYINITIAL;
                zzLexicalState = YYINITIAL;
            }
        }

    }

    public static final class LexerState  {
        final ByteStack stack;
        /* the current state of the DFA */
        final int zzState;
        /* the current lexical state */
        final int zzLexicalState;
        /* remember the heredoc */
        final String heredoc;
        /* and the lenght of */
        final int hereocLength;

        LexerState(ByteStack stack, int zzState, int zzLexicalState, String heredoc, int hereocLength) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.heredoc = heredoc;
            this.hereocLength = hereocLength;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }

            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                && (this.zzLexicalState == state.zzLexicalState)
                && (this.hereocLength == state.hereocLength)
                && ((this.heredoc == null && state.heredoc == null) || (this.heredoc != null && state.heredoc != null && this.heredoc.equals(state.heredoc))));
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            hash = 31 * hash + this.hereocLength;
            if (heredoc != null) {
                hash = 31 * hash + this.heredoc.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.copyOf(), zzState, zzLexicalState, heredoc, hereocLength);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.heredoc = state.heredoc;
        this.hereocLength = state.hereocLength;
    }

    protected boolean isHeredocState(int state) {
        return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC || state == ST_PHP_NOWDOC;
    }

    public int[] getParamenters() {
        return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }

    protected int getZZStartRead() {
        return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
        return this.zzPushbackPos;
    }

    protected void pushBack(int i) {
        yypushback(i);
    }

    protected void popState() {
        yybegin(stack.pop());
    }

    protected void pushState(final int state) {
        stack.push(getZZLexicalState());
        yybegin(state);
    }

    private boolean isLabelChar(char c) {
        return c == '_'
                || (c >= 'a' && c <= 'z')
                || (c >= 'A' && c <= 'Z')
                || (c >= 0x7f && c <= 0xff);
    }

    private boolean isEndNowdoc() {
        String yytext = yytext().trim();
        int lastIndexOfNewline = yytext.lastIndexOf('\n');
        if (lastIndexOfNewline == -1) {
            lastIndexOfNewline = yytext.lastIndexOf('\r');
        }
        if (lastIndexOfNewline != -1) {
            yytext = yytext.substring(lastIndexOfNewline);
        }
        return isEndHereOrNowdoc(yytext);
    }

    private boolean isEndHeredoc() {
        return isEndHereOrNowdoc(yytext());
    }

    private boolean isEndHereOrNowdoc(String text) {
        // check whether ID exists
        String trimedText = text.trim();
        boolean isEnd = false;
        if (trimedText.startsWith(heredoc)) {
            if (trimedText.length() == heredoc.length()) {
                isEnd = true;
            } else if (trimedText.length() > heredoc.length()
                    && !isLabelChar(trimedText.charAt(heredoc.length()))) {
                // e.g.
                // $test = <<< END
                // ENDING
                // END
                isEnd = true;
            }
        }
        return isEnd;
    }

 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHP5ColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHP5ColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32:
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens
    return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 168: break;
        case 101:
          { return PHPTokenId.PHP_FALSE;
          }
        case 169: break;
        case 26:
          { yypushback(1);
    yybegin(ST_PHP_NOWDOC);
          }
        case 170: break;
        case 35:
          { String yytext = yytext();
    switch (yytext.charAt(yytext.length() - 1)) {
        case '?':
        case '%':
            yypushback(1);
            break;
        default:
            popState();
    }
     return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 171: break;
        case 81:
          { yypushback(2);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 172: break;
        case 115:
          { return PHPTokenId.PHP_TYPE_MIXED;
          }
        case 173: break;
        case 5:
          { if(isInConst) {
        // for checking arrays
        // e.g. const CONST = [1, 2], const GOTO = 1;
        String text = yytext();
        switch (text) {
            case "[":
                bracketBalanceInConst++;
                break;
            case "]":
                bracketBalanceInConst--;
                break;
            case "(":
                parenBalanceInConst++;
                break;
            case ")":
                parenBalanceInConst--;
                break;
            default:
                break;
        }
    }
    return PHPTokenId.PHP_TOKEN;
          }
        case 174: break;
        case 66:
          { popState();
    return PHPTokenId.PHPDOC_COMMENT_END;
          }
        case 175: break;
        case 139:
          { return PHPTokenId.PHP_INCLUDE;
          }
        case 176: break;
        case 158:
          { return PHPTokenId.PHP_ENDDECLARE;
          }
        case 177: break;
        case 37:
          { return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 178: break;
        case 61:
          { /* <ST_PHP_NOWDOC>{NEWLINE}{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\r\n]? */
        if (isEndNowdoc()) {
            String yytext = yytext();
            int trailingNewlineOffset = (yytext.endsWith("\n") || yytext.endsWith("\r")) ? 2 : 0;
            int lastIndexOfNewline = yytext.lastIndexOf('\n', yylength() - trailingNewlineOffset);
            if (lastIndexOfNewline == -1) {
                lastIndexOfNewline = yytext.lastIndexOf('\r', yylength() - trailingNewlineOffset);
            }
            int back = yylength() - lastIndexOfNewline - 1; // -1 [\r\n] length
            yypushback(back);
            yybegin(ST_PHP_END_NOWDOC);
            return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
        } else {
            yypushback(1); // [\r\n] length
        }
          }
        case 179: break;
        case 128:
          { return PHPTokenId.PHP_GLOBAL;
          }
        case 180: break;
        case 162:
          { return PHPTokenId.PHP__FUNCTION__;
          }
        case 181: break;
        case 18:
          { popState();
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 182: break;
        case 41:
          { if (shortTagsAllowed ) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 183: break;
        case 57:
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 184: break;
        case 124:
          { return PHPTokenId.PHP_TYPE_OBJECT;
          }
        case 185: break;
        case 92:
          { return PHPTokenId.PHP_LIST;
          }
        case 186: break;
        case 100:
          { return PHPTokenId.PHP_EMPTY;
          }
        case 187: break;
        case 14:
          { pushState(ST_PHP_LINE_COMMENT);
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 188: break;
        case 97:
          { return PHPTokenId.PHP_CASE;
          }
        case 189: break;
        case 44:
          { return PHPTokenId.PHP_VARIABLE;
          }
        case 190: break;
        case 47:
          { //popState();
        yybegin(YYINITIAL);
        if (yylength() > 2) {
            yypushback(yylength()-2);
        }
        stack.clear();
    return PHPTokenId.PHP_CLOSETAG;
          }
        case 191: break;
        case 23:
          { int trailingNewLineLength = 1;
        int label_len = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(label_len - 1)==';') {
           label_len--;
           back++;
        }

        if (isEndHeredoc()) {
            int indexOfHeredocId = yytext().indexOf(heredoc);
            back += label_len - indexOfHeredocId;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            yypushback(yylength() - trailingNewLineLength);
            yybegin(ST_PHP_HEREDOC);
        }
          }
        case 192: break;
        case 8:
          { if(isInConst) {
        isInConst = false;
        parenBalanceInConst = 0;
        bracketBalanceInConst = 0;
    }
    return PHPTokenId.PHP_SEMICOLON;
          }
        case 193: break;
        case 46:
          { if (aspTagsAllowed) {
            yybegin(YYINITIAL);
            stack.clear();
        return PHPTokenId.PHP_CLOSETAG;
    }
    return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 194: break;
        case 36:
          { return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 195: break;
        case 89:
          { pushState(ST_PHP_DOC_COMMENT);
    yypushback(yylength()-3);
    return PHPTokenId.PHPDOC_COMMENT_START;
          }
        case 196: break;
        case 106:
          { return PHPTokenId.PHP_ISSET;
          }
        case 197: break;
        case 141:
          { return PHPTokenId.PHP__FILE__;
          }
        case 198: break;
        case 51:
          { return PHPTokenId.PHP_IF;
          }
        case 199: break;
        case 58:
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 200: break;
        case 68:
          { if (aspTagsAllowed) {
            yybegin(YYINITIAL);
            stack.clear();
        return PHPTokenId.PHP_CLOSETAG;
    }
    String text = yytext();
    if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
        popState();
    }
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 201: break;
        case 49:
          { return PHPTokenId.PHP_AS;
          }
        case 202: break;
        case 24:
          { heredoc=null;
    hereocLength=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 0;
    // mark just the label
    if (yytext().charAt(yylength() - 1)==';') {
        back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_HEREDOC_TAG_END;
          }
        case 203: break;
        case 166:
          { pushState(ST_HALTED_COMPILER);
    return PHPTokenId.PHP_HALT_COMPILER;
          }
        case 204: break;
        case 77:
          { return PHPTokenId.PHP_USE;
          }
        case 205: break;
        case 109:
          { return PHPTokenId.PHP_TYPE_FLOAT;
          }
        case 206: break;
        case 165:
          { return PHPTokenId.PHP__NAMESPACE__;
          }
        case 207: break;
        case 67:
          { popState();
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 208: break;
        case 164:
          { return PHPTokenId.PHP_INCLUDE_ONCE;
          }
        case 209: break;
        case 152:
          { return PHPTokenId.PHP_NAMESPACE;
          }
        case 210: break;
        case 13:
          { if (isInConst) {
        pushState(ST_PHP_LOOKING_FOR_CONSTANT_NAME);
    }
    return PHPTokenId.PHP_TOKEN;
          }
        case 211: break;
        case 65:
          { popState();
    return PHPTokenId.PHP_COMMENT_END;
          }
        case 212: break;
        case 146:
          { return PHPTokenId.PHP_ITERABLE;
          }
        case 213: break;
        case 104:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    hereocLength = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        hereocLength--;
    }
    // HEREDOC PHP 5.3
    if (yytext().charAt(startString) == '"') {
        hereocLength -= 2;
        startString ++;
    }
    heredoc = yytext().substring(startString,hereocLength+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHPTokenId.PHP_HEREDOC_TAG_START;
          }
        case 214: break;
        case 64:
          { // const keyword is also used within group uses. so check "=", otherwise it matches the following:
    // use A\{const CONSTANTA, function myFunction,...}
    popState();
    String match = yytext();
    String[] segments = match.split("[ \n\r\t]+");
    int back = 1;
    if(segments.length > 1) {
        int wsLength = yylength() - 1 - segments[0].length(); // - "=" - {LABEL}
        back +=  wsLength;
    }
    yypushback(back);
    return PHPTokenId.PHP_STRING;
          }
        case 215: break;
        case 39:
          { popState();
    return PHPTokenId.T_INLINE_HTML;
          }
        case 216: break;
        case 6:
          { return PHPTokenId.PHP_OPERATOR;
          }
        case 217: break;
        case 11:
          { pushState(ST_PHP_BACKQUOTE);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 218: break;
        case 54:
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 219: break;
        case 3:
          { return PHPTokenId.PHP_NUMBER;
          }
        case 220: break;
        case 78:
          { yypushback(1);
    pushState(ST_PHP_VAR_OFFSET);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 221: break;
        case 136:
          { return PHPTokenId.PHP_REQUIRE;
          }
        case 222: break;
        case 138:
          { return PHPTokenId.PHP_DECLARE;
          }
        case 223: break;
        case 112:
          { return PHPTokenId.PHP_CLONE;
          }
        case 224: break;
        case 107:
          { return PHPTokenId.PHP_TRAIT;
          }
        case 225: break;
        case 56:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_TOKEN;
          }
        case 226: break;
        case 72:
          { return PHPTokenId.PHP_NEW;
          }
        case 227: break;
        case 83:
          { yypushback(2);
    return PHPTokenId.PHP_COMMENT;
          }
        case 228: break;
        case 63:
          { return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 229: break;
        case 19:
          { yypushback(1);
        popState();
          }
        case 230: break;
        case 132:
          { return PHPTokenId.PHP_EXTENDS;
          }
        case 231: break;
        case 90:
          { return PHPTokenId.PHP_NULL;
          }
        case 232: break;
        case 98:
          { pushState(ST_PHP_IN_SCRIPTING);
    //yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_OPENTAG;
    //return createSymbol(ASTSymbol.T_OPEN_TAG);
          }
        case 233: break;
        case 120:
          { return PHPTokenId.PHP_WHILE;
          }
        case 234: break;
        case 151:
          { return PHPTokenId.PHP_ENDSWITCH;
          }
        case 235: break;
        case 140:
          { return PHPTokenId.PHP_PRIVATE;
          }
        case 236: break;
        case 1:
          { return PHPTokenId.T_INLINE_HTML;
          }
        case 237: break;
        case 161:
          { return PHPTokenId.PHP_YIELD_FROM;
          }
        case 238: break;
        case 99:
          { return PHPTokenId.PHP_ENDIF;
          }
        case 239: break;
        case 33:
          { yypushback(1);
    popState();
        if (yylength() > 0)
            return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 240: break;
        case 125:
          { return PHPTokenId.PHP_STATIC;
          }
        case 241: break;
        case 137:
          { return PHPTokenId.PHP_DEFAULT;
          }
        case 242: break;
        case 17:
          { return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 243: break;
        case 30:
          { popState();
    return PHPTokenId.PHP_TOKEN;
          }
        case 244: break;
        case 42:
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 245: break;
        case 142:
          { return PHPTokenId.PHP__LINE__;
          }
        case 246: break;
        case 85:
          { return PHPTokenId.PHP_EXIT;
          }
        case 247: break;
        case 40:
          { if (aspTagsAllowed) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 248: break;
        case 45:
          { pushState(ST_PHP_COMMENT);
    return PHPTokenId.PHP_COMMENT_START;
          }
        case 249: break;
        case 103:
          { return PHPTokenId.PHP_BREAK;
          }
        case 250: break;
        case 31:
          { if(parenBalanceInConst == 0 && bracketBalanceInConst == 0) {
        isInConst = false;
    }
    yypushback(1);
    popState();
          }
        case 251: break;
        case 22:
          { yypushback(1);
        yybegin(ST_PHP_HEREDOC);
          }
        case 252: break;
        case 154:
          { return PHPTokenId.PHP_INSTEADOF;
          }
        case 253: break;
        case 114:
          { return PHPTokenId.PHP_MATCH;
          }
        case 254: break;
        case 25:
          { /* <ST_PHP_NOWDOC>{NOWDOC_CHARS}|{NEWLINE} */
        // retrun PHPTokenId when the closing marker is found
          }
        case 255: break;
        case 155:
          { return PHPTokenId.PHP_PROTECTED;
          }
        case 256: break;
        case 69:
          { String text = yytext();
    if ((text.charAt(1)=='%' && aspTagsAllowed)
        || (text.charAt(1)=='?')) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 257: break;
        case 116:
          { return PHPTokenId.PHP_PRINT;
          }
        case 258: break;
        case 76:
          { return PHPTokenId.PHP_VAR;
          }
        case 259: break;
        case 167:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.T_INLINE_HTML;
          }
        case 260: break;
        case 108:
          { return PHPTokenId.PHP_THROW;
          }
        case 261: break;
        case 129:
          { return PHPTokenId.PHP_PARENT;
          }
        case 262: break;
        case 127:
          { return PHPTokenId.PHP_SWITCH;
          }
        case 263: break;
        case 84:
          { yypushback(2); // go back to mark end of comment in the next token
        return PHPTokenId.PHPDOC_COMMENT;
          }
        case 264: break;
        case 74:
          { return PHPTokenId.PHP_TYPE_INT;
          }
        case 265: break;
        case 118:
          { return PHPTokenId.PHP_CASTING;
          }
        case 266: break;
        case 48:
          { return PHPTokenId.PHP_TEXTUAL_OPERATOR;
          }
        case 267: break;
        case 38:
          { popState();return PHPTokenId.WHITESPACE;
          }
        case 268: break;
        case 73:
          { return PHPTokenId.PHP_DIE;
          }
        case 269: break;
        case 150:
          { return PHPTokenId.PHP__CLASS__;
          }
        case 270: break;
        case 2:
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 271: break;
        case 113:
          { return PHPTokenId.PHP_CLASS;
          }
        case 272: break;
        case 134:
          { return PHPTokenId.PHP_FINALLY;
          }
        case 273: break;
        case 153:
          { return PHPTokenId.PHP_INTERFACE;
          }
        case 274: break;
        case 149:
          { return PHPTokenId.PHP__TRAIT__;
          }
        case 275: break;
        case 117:
          { return PHPTokenId.PHP_UNSET;
          }
        case 276: break;
        case 12:
          { return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 277: break;
        case 28:
          { yypushback(1);
    popState();
          }
        case 278: break;
        case 130:
          { return PHPTokenId.PHP_PUBLIC;
          }
        case 279: break;
        case 21:
          { int indexOfNewline = yytext().indexOf("\r");
        if (indexOfNewline == -1) {
            indexOfNewline = yytext().indexOf("\n");
        }
        if (indexOfNewline > 0) {
            // if index equals 0, don't pushback (infinite loop)
            yypushback(yylength() - indexOfNewline);
        }
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 280: break;
        case 163:
          { return PHPTokenId.PHP_REQUIRE_ONCE;
          }
        case 281: break;
        case 157:
          { return PHPTokenId.PHP_ENDFOREACH;
          }
        case 282: break;
        case 43:
          { // PHP 7.4 Arrow Functions 2.0
    // https://wiki.php.net/rfc/arrow_functions_v2
    return PHPTokenId.PHP_FN;
          }
        case 283: break;
        case 82:
          { return PHPTokenId.PHP_NULLSAFE_OBJECT_OPERATOR;
          }
        case 284: break;
        case 126:
          { return PHPTokenId.PHP_TYPE_STRING;
          }
        case 285: break;
        case 87:
          { return PHPTokenId.PHP_EVAL;
          }
        case 286: break;
        case 79:
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_NULLSAFE_OBJECT_OPERATOR;
          }
        case 287: break;
        case 94:
          { return PHPTokenId.PHP_GOTO;
          }
        case 288: break;
        case 110:
          { isInConst = true;
    parenBalanceInConst = 0;
    bracketBalanceInConst = 0;
    pushState(ST_PHP_LOOKING_FOR_CONSTANT_NAME);
    return PHPTokenId.PHP_CONST;
          }
        case 289: break;
        case 20:
          { popState();
        return PHPTokenId.PHP_STRING;
          }
        case 290: break;
        case 145:
          { return PHPTokenId.PHP_ABSTRACT;
          }
        case 291: break;
        case 27:
          { heredoc=null; hereocLength=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 0;
    // mark just the label
    if (yytext().charAt(yylength() - 1)==';') {
        back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_NOWDOC_TAG_END;
          }
        case 292: break;
        case 9:
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 293: break;
        case 62:
          { /* <ST_START_NOWDOC>{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\r\n]? */
    // there is no [\r\n] if it is the last line
    // i.e. not [\r\n] but EOF, so check not [\r\n] but [\r\n]?
    if (isEndNowdoc()) {
        int indexOfNowdocId = yytext().indexOf(heredoc);
        int back = yylength() - indexOfNowdocId - heredoc.length();
        yypushback(back);
        heredoc=null;
        hereocLength=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_NOWDOC_TAG_END;
    } else {
        yypushback(1);
        yybegin(ST_PHP_NOWDOC);
    }
          }
        case 294: break;
        case 88:
          { return PHPTokenId.PHP_ECHO;
          }
        case 295: break;
        case 102:
          { return PHPTokenId.PHP_FINAL;
          }
        case 296: break;
        case 156:
          { return PHPTokenId.PHP__METHOD__;
          }
        case 297: break;
        case 10:
          { return PHPTokenId.PHP_NS_SEPARATOR;
          }
        case 298: break;
        case 119:
          { return PHPTokenId.PHP_YIELD;
          }
        case 299: break;
        case 144:
          { pushState(ST_PHP_LOOKING_FOR_FUNCTION_NAME);
    return PHPTokenId.PHP_FUNCTION;
          }
        case 300: break;
        case 131:
          { return PHPTokenId.PHP__DIR__;
          }
        case 301: break;
        case 4:
          { return  PHPTokenId.PHP_STRING;
          }
        case 302: break;
        case 147:
          { return PHPTokenId.PHP_CONTINUE;
          }
        case 303: break;
        case 60:
          { /* {NEWLINE}{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\n\r]? */
        int trailingNewLineLength = 1;
        if (isEndHeredoc()) {
            String yytext = yytext();
            int newlineLength = yytext.startsWith("\r\n") ? 2 : 1;
            int back = yylength() - newlineLength;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            // handle variable
            char previousChar = ' ';
            int indexOfVariable = -1;
            for (int i = 0; i < yylength(); i++) {
                char currentChar = yytext().charAt(i);
                if (currentChar == '$' && previousChar == '{') {
                    indexOfVariable = i - 1;
                    break;
                }
                if (currentChar == '$' && previousChar != '\\') {
                    indexOfVariable = i;
                    break;
                }
                previousChar = currentChar;
            }

            if (indexOfVariable == -1) {
                yypushback(trailingNewLineLength);
            } else {
                yypushback(yylength() - indexOfVariable);
                return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
            }
        }
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 304: break;
        case 160:
          { return PHPTokenId.PHP_IMPLEMENTS;
          }
        case 305: break;
        case 71:
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_NULLSAFE_OBJECT_OPERATOR;
          }
        case 306: break;
        case 75:
          { return PHPTokenId.PHP_TRY;
          }
        case 307: break;
        case 105:
          { return PHPTokenId.PHP_ARRAY;
          }
        case 308: break;
        case 7:
          { return PHPTokenId.WHITESPACE;
          }
        case 309: break;
        case 123:
          { return PHPTokenId.PHP_RETURN;
          }
        case 310: break;
        case 34:
          { return PHPTokenId.PHP_TOKEN;
          }
        case 311: break;
        case 16:
          { return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 312: break;
        case 111:
          { return PHPTokenId.PHP_CATCH;
          }
        case 313: break;
        case 148:
          { return PHPTokenId.PHP_CALLABLE;
          }
        case 314: break;
        case 80:
          { String text = yytext();
        int lastIndexOfDollar = text.lastIndexOf('$');
        yypushback(text.length() - lastIndexOfDollar);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 315: break;
        case 59:
          { return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 316: break;
        case 159:
          { return PHPTokenId.PHP_INSTANCEOF;
          }
        case 317: break;
        case 135:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        hereocLength = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            hereocLength--;
        }
        // first quate
        startString++;
        heredoc = yytext().substring(startString, hereocLength+startString);
        yybegin(ST_PHP_START_NOWDOC);
        return PHPTokenId.PHP_NOWDOC_TAG_START;
          }
        case 318: break;
        case 95:
          { return PHPTokenId.PHP_TYPE_BOOL;
          }
        case 319: break;
        case 121:
          { return PHPTokenId.PHP_ENDFOR;
          }
        case 320: break;
        case 70:
          { return PHPTokenId.PHP_FOR;
          }
        case 321: break;
        case 133:
          { return PHPTokenId.PHP_FOREACH;
          }
        case 322: break;
        case 53:
          { pushState(ST_PHP_LOOKING_FOR_STATIC_PROPERTY);
    return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 323: break;
        case 29:
          { popState();
    return PHPTokenId.PHP_STRING;
          }
        case 324: break;
        case 86:
          { return PHPTokenId.PHP_ELSE;
          }
        case 325: break;
        case 93:
          { return PHPTokenId.PHP_SELF;
          }
        case 326: break;
        case 55:
          { yypushback(1);
    return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 327: break;
        case 15:
          { int lastState = stack.peek();
    if (lastState != ST_PHP_IN_SCRIPTING && lastState != YYINITIAL) {
        // probably in some sub state -> "{$" or "${"
        popState();
    }
    return PHPTokenId.PHP_CURLY_CLOSE;
          }
        case 328: break;
        case 50:
          { return PHPTokenId.PHP_DO;
          }
        case 329: break;
        case 96:
          { return PHPTokenId.PHP_TYPE_VOID;
          }
        case 330: break;
        case 143:
          { return PHPTokenId.PHP_ENDWHILE;
          }
        case 331: break;
        case 122:
          { return PHPTokenId.PHP_ELSEIF;
          }
        case 332: break;
        case 91:
          { return PHPTokenId.PHP_TRUE;
          }
        case 333: break;
        case 52:
          { return PHPTokenId.PHP_ATTRIBUTE;
          }
        case 334: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_PHP_COMMENT: {
              if (input.readLength() > 0) {
                input.backup(1);  // backup eof
                return PHPTokenId.PHP_COMMENT;
              }
              else {
                  return null;
              }
            }
            case 757: break;
            case ST_PHP_DOC_COMMENT: {
              if (input.readLength() > 0) {
                    input.backup(1);  // backup eof
                    return PHPTokenId.PHPDOC_COMMENT;
                }
                else {
                    return null;
                }
            }
            case 758: break;
            default:
              {        if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return PHPTokenId.UNKNOWN_TOKEN;
        } else {
            return null;
        }
 }
            }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
